components:
  parameters:
    archived-query-param:
      description: Only return projects whose `archived` field takes on the value
        of this parameter.
      example: false
      in: query
      name: archived
      schema:
        type: boolean
    expand:
      description: 'Query results and sub-objects are returned in compact form by
        default. This option can be used to expand query results or sub-objects to
        return more detailed information. Be sure you really need the information
        in the expanded form, as executing a query with many results in expanded form
        can be costly and return you a lot of data to consume.

        If the fields option is also used, it will take precedence over the expand
        option and prevent expansion.'
      example:
      - followers
      explode: false
      in: query
      name: opt_expand
      required: false
      schema:
        items:
          type: string
        type: array
      style: form
    fields:
      description: 'Some requests return *compact* representations of objects, to
        conserve resources and complete the request more efficiently. Other times
        requests return more information than you may need. This option allows you
        to list the exact set of fields that the API should be sure to return for
        the objects. The field names should be provided as paths, described below.

        The id of included objects will always be returned, regardless of the field
        options.'
      example:
      - followers
      - assignee
      explode: false
      in: query
      name: opt_fields
      required: false
      schema:
        items:
          type: string
        type: array
      style: form
    limit:
      description: The number of objects to return per page. The value must be between
        1 and 100.
      example: 50
      in: query
      name: limit
      schema:
        type: integer
    offset:
      description: 'An offset to the next page returned by the API. A pagination request
        will return an offset token, which can be used as an input parameter to the
        next request. If an offset is not passed in, the API will return the first
        page of results.

        ''Note: You can only pass in an offset that was returned to you via a previously
        paginated request.'''
      example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
      in: query
      name: offset
      schema:
        type: string
    pretty:
      allowEmptyValue: true
      description: Provides the response in “pretty” output. In the case of JSON this
        means doing proper line breaking and indentation to make it readable. This
        will take extra time and increase the response size so it is advisable only
        to use this during debugging.
      in: query
      name: opt_pretty
      required: false
      schema:
        type: boolean
      style: form
    project-path-id:
      description: Globally unique identifier for the project.
      example: 1331
      in: path
      name: project-id
      required: true
      schema:
        type: integer
    section-path-id:
      description: The globally unique identified for the section.
      example: 321654
      in: path
      name: section-id
      required: true
      schema:
        type: integer
    tag-path-id:
      description: Globally unique identifier for the tag.
      example: 11235
      in: path
      name: tag-id
      required: true
      schema:
        type: integer
    task-path-id:
      description: The task to operate on.
      example: 321654
      in: path
      name: task-id
      required: true
      schema:
        type: integer
    team-path-id:
      description: Globally unique identifier for the team.
      example: 159874
      in: path
      name: team-id
      required: true
      schema:
        type: integer
    user-query-param:
      description: The user to filter results on.
      examples:
        email:
          summary: An email address for a user
          value: sashimi@asana.com
        id:
          summary: A globally unique identifier for the user
          value: 14641
        me:
          summary: The keyword 'me' to indicate the current user making the request.
          value: me
      in: query
      name: user
      schema:
        oneOf:
        - type: integer
        - enum:
          - me
          type: string
        - format: email
          type: string
    workspace-path-id:
      description: Globally unique identifier for the workspace or organization.
      example: 12345
      in: path
      name: workspace-id
      required: true
      schema:
        type: integer
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: This usually occurs because of a missing or malformed parameter.
        Check the documentation and the syntax of your request and try again.
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The authentication and request syntax was valid but the server
        is refusing to complete the request. This can happen if you try to read or
        write to objects or properties that the user does not have access to.
    GenericErrorResponse:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: 'Sadly, sometimes requests to the API are not successful. Failures
        can occur for a wide range of reasons. In all cases, the API should return
        an HTTP Status Code that indicates the nature of the failure, with a response
        body in JSON format containing additional information.

        In the event of a server error the response body will contain an error phrase.
        These phrases are automatically generated using the [node-asana-phrase library](https://github.com/Asana/node-asana-phrase)
        and can be used by Asana support to quickly look up the incident that caused
        the server error.'
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: There was a problem on Asana’s end.
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Either the request method and path supplied do not specify a known
        action in the API, or the object specified by the request does not exist.
    PaymentRequired:
      description: The request was valid, but the queried object or object mutation
        specified in the request is only available to premium organizations and workspaces.
    TooManyRequests:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: You have exceeded one of the enforced rate limits in the API. See
        the [documentation on rate limiting](https://asana.com/developers/documentation/getting-started/rate-limits)
        for more information.
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: A valid authentication token was not provided with the request,
        so the API could not associate a user with the request.
  schemas:
    AsanaNamedObject:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - properties:
          name:
            description: The name of the object.
            example: Bug Task
            type: string
        type: object
    AsanaObject:
      description: A generic Asana Object, containing a globally unique identifier.
      properties:
        gid:
          description: Globally unique ID of the object, as a string.
          example: '12345'
          readOnly: true
          type: string
        id:
          description: Globally unique ID of the object, as an integer.
          example: 12345
          readOnly: true
          type: integer
        resource_type:
          description: The base type of the resource.
          example: task
          readOnly: true
          type: string
      type: object
    AsanaObjectArray:
      description: A generic list of objects, such as those returned by the typeahead
        search endpoint.
      properties:
        data:
          items:
            $ref: '#/components/schemas/AsanaNamedObject'
          type: array
      type: object
    AsanaObjectWithSubtypes:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - properties:
          resource_subtype:
            description: The subtype of the resource.
            example: default_task
            readOnly: true
            type: string
        type: object
      description: A generic Asana Object that can have subtypes.
    Attachment:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - properties:
          created_at:
            description: The time at which this attachment was uploaded.
            example: '2012-02-22T02:06:58.147Z'
            format: date-time
            readOnly: true
            type: string
          download_url:
            description: 'The URL containing the content of the attachment.

              **Note:** May be null if the attachment is hosted by [Box](https://www.box.com/).
              If present, this URL may only be valid for 1 hour from the time of retrieval.
              You should avoid persisting this URL somewhere and just refresh it on
              demand to ensure you do not keep stale URLs.'
            example: https://www.dropbox.com/s/123/Screenshot.png?dl=1
            format: uri
            nullable: true
            readOnly: true
            type: string
          host:
            description: The service hosting the attachment. Valid values are `asana`,
              `dropbox`, `gdrive` and `box`.
            example: dropbox
            readOnly: true
            type: string
          name:
            description: The name of the file.
            example: Screenshot.png
            readOnly: true
            type: string
          parent:
            $ref: '#/components/schemas/Task'
            description: The task this attachment is attached to.
            readOnly: true
          view_url:
            description: The URL where the attachment can be viewed, which may be
              friendlier to users in a browser than just directing them to a raw file.
              May be null if no view URL exists for the service.
            example: https://www.dropbox.com/s/123/Screenshot.png
            nullable: true
            readOnly: true
            type: string
        type: object
      description: An *attachment* object represents any file attached to a task in
        Asana, whether it’s an uploaded file or one associated via a third-party service
        such as Dropbox or Google Drive.
    AttachmentArray:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Attachment'
          type: array
      type: object
    AttachmentObject:
      properties:
        data:
          $ref: '#/components/schemas/Attachment'
      type: object
    BatchRequest:
      description: A request object for use in a batch request.
      properties:
        data:
          description: For `GET` requests, this should be a map of query parameters
            you would have normally passed in the URL. Options and pagination are
            not accepted here; put them in `options` instead. For `POST`, `PATCH`,
            and `PUT` methods, this should be the content you would have normally
            put in the data field of the body.
          example:
            assignee: me
            workspace: 1337
          type: object
        method:
          description: The HTTP method you wish to emulate for the action.
          enum:
          - get
          - post
          - put
          - delete
          - patch
          - head
          example: get
          type: string
        options:
          description: Pagination (`limit` and `offset`) and output options (`fields`
            or `expand`) for the action. “Pretty” JSON output is not an available
            option on individual actions; if you want pretty output, specify that
            option on the parent request.
          example:
            fields:
            - name
            - notes
            - completed
            limit: 3
          properties:
            expand:
              description: The expansion path for the request.
              example: .subtasks
              type: string
            fields:
              description: The fields to retrieve in the request.
              example:
              - name
              - id
              - notes
              - completed
              items:
                type: string
              type: array
            limit:
              description: Pagination limit for the request.
              example: 50
              type: integer
            offset:
              description: Pagination offset for the request.
              example: eyJ0eXAiOJiKV1iQLCJhbGciOiJIUzI1NiJ9
              type: integer
          type: object
        relative_path:
          description: The path of the desired endpoint relative to the API’s base
            URL. Query parameters are not accepted here; put them in `data` instead.
          example: /tasks/123
          type: string
      required:
      - relative_path
      - method
      type: object
    BatchResponse:
      description: A response object returned from a batch request.
      properties:
        body:
          description: The JSON body that the invoked endpoint returned.
          example:
            data:
              completed: false
              id: 1967
              name: Hello, world!
              notes: How are you today?
          type: object
        headers:
          description: A map of HTTP headers specific to this result. This is primarily
            used for returning a `Location` header to accompany a `201 Created` result.  The
            parent HTTP response will contain all common headers.
          example:
            location: /tasks/1234
          type: object
        status_code:
          description: The HTTP status code that the invoked endpoint returned.
          example: 200
          type: integer
      type: object
    CustomField:
      allOf:
      - $ref: '#/components/schemas/AsanaObjectWithSubtypes'
      - properties:
          description:
            description: The description of the custom field.
            example: Development team priority
            type: string
          enum_options:
            description: Only relevant for custom fields of type `enum`. This array
              specifies the possible values which an `enum` custom field can adopt.
              To modify the enum options, refer to [working with enum options](https://asana.com/developers/api-reference/custom_fields#enum-options).
            items:
              $ref: '#/components/schemas/EnumOption'
            type: array
          name:
            description: The name of the custom field.
            example: Priority
            type: string
          precision:
            description: Only relevant for custom fields of type ‘Number’. This field
              dictates the number of places after the decimal to round to, i.e. 0
              is integer values, 1 rounds to the nearest tenth, and so on. Must be
              between 0 and 6, inclusive.
            example: 2
            type: integer
          type:
            description: The type of the custom field.
            enum:
            - text
            - enum
            - number
            example: enum
            type: string
        type: object
      description: 'Custom Fields store the metadata that is used in order to add

        user-specified information to tasks in Asana. Be sure to reference the

        Custom Fields developer documentation for more information about how

        custom fields relate to various resources in Asana.


        Since custom fields can be defined for one of a number of types, and

        these types have different data and behaviors, there are fields that are

        relevant to a particular type. For instance, as noted above, enum_options

        is only relevant for the enum type and defines the set of choices that

        the enum could represent.'
    CustomFieldArray:
      properties:
        data:
          items:
            $ref: '#/components/schemas/CustomField'
          type: array
      type: object
    CustomFieldObject:
      properties:
        data:
          $ref: '#/components/schemas/CustomField'
      type: object
    CustomFieldSettings:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - $ref: '#/components/schemas/CustomFieldSettingsCompact'
      - properties:
          project:
            $ref: '#/components/schemas/Project'
            description: The ID of the project that this custom field setting is for.
            readOnly: true
        type: object
      description: Custom fields are attached to a particular project with the Custom
        Field Settings resource. This resource both represents the many-to-many join
        of the Custom Field and Project as well as stores information that is relevant
        to that particular pairing; for instance, the is_important property determines
        some possible application-specific handling of that custom field.
    CustomFieldSettingsArray:
      properties:
        data:
          items:
            $ref: '#/components/schemas/CustomFieldSettings'
          type: array
      type: object
    CustomFieldSettingsCompact:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - properties:
          created_at:
            description: The time at which this custom field was created.
            example: '2012-02-22T02:06:58.147Z'
            format: date-time
            readOnly: true
            type: string
          custom_field:
            $ref: '#/components/schemas/CustomField'
            description: The custom field that this custom field settings refers to.
            readOnly: true
          is_important:
            description: '`is_important` is a flag that can be used in application-defined
              behavior: for instance, in the Asana web application, is_important is
              used to determine if this custom field on this project is displayed
              in a column when viewed in the project list.'
            example: false
            readOnly: true
            type: boolean
        type: object
      description: Custom fields are attached to a particular project with the Custom
        Field Settings resource. This resource both represents the many-to-many join
        of the Custom Field and Project as well as stores information that is relevant
        to that particular pairing; for instance, the is_important property determines
        some possible application-specific handling of that custom field. The compact
        version of this object is used when referenced as part of a project, to avoid
        circular references.
    DependencyArray:
      description: A set of task dependencies.
      example:
        data:
          dependencies:
          - 133713
          - 184253
      properties:
        data:
          properties:
            dependencies:
              description: An array of task IDs that a task should depend on.
              items:
                type: integer
              type: array
          type: object
      type: object
    DependentArray:
      description: A set of dependent tasks.
      example:
        data:
          dependents:
          - 133713
          - 184253
      properties:
        data:
          properties:
            dependents:
              description: An array of task IDs that are dependents of the given task.
              items:
                type: integer
              type: array
          type: object
      type: object
    EmptyObject:
      description: An empty object.
      properties:
        data:
          type: object
      type: object
    EnumOption:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - properties:
          color:
            description: Whether or not the enum option is a selectable value for
              the custom field.
            example: blue
            type: string
          enabled:
            description: The color of the enum option. Defaults to ‘none’.
            example: true
            type: boolean
          name:
            description: The name of the enum option.
            example: Low
            type: string
        type: object
      description: 'Enum options are the possible values which an enum custom field
        can

        adopt. An enum custom field must contain at least 1 enum option but no

        more than 50.


        You can add enum options to a custom field by using the `POST

        /custom_fields/custom-field-id/enum_options` endpoint.


        **It is not possible to remove or delete an enum option**. Instead, enum

        options can be disabled by updating the `enabled` field to false with the

        `PUT /enum_options/enum_option-id` endpoint. Other attributes can be

        updated similarly.


        On creation of an enum option, `enabled` is always set to `true`, meaning

        the enum option is a selectable value for the custom field. Setting

        `enabled=false` is equivalent to “trashing” the enum option in the Asana

        web app within the “Edit Fields” dialog. The enum option will no longer

        be selectable but, if the enum option value was previously set within a

        task, the task will retain the value.


        Enum options are an ordered list and by default new enum options are

        inserted at the end. Ordering in relation to existing enum options can be

        specified on creation by using `insert_before` or `insert_after` to

        reference an existing enum option. Only one of `insert_before` and

        `insert_after` can be provided when creating a new enum option.


        An enum options list can be reordered with the `POST

        /custom_fields/custom-field-id/enum_options/insert` endpoint.'
    Error:
      description: 'Sadly, sometimes requests to the API are not successful. Failures
        can

        occur for a wide range of reasons. In all cases, the API should return

        an HTTP Status Code that indicates the nature of the failure,

        with a response body in JSON format containing additional information.


        In the event of a server error the response body will contain an error

        phrase. These phrases are automatically generated using the

        [node-asana-phrase

        library](https://github.com/Asana/node-asana-phrase) and can be used by

        Asana support to quickly look up the incident that caused the server

        error.'
      properties:
        errors:
          items:
            properties:
              help:
                description: Additional information directing developers to resources
                  on how to address and fix the problem, if available.
                example: 'For more information on API status codes and how to handle
                  them, read the docs on errors: https://asana.com/developers/documentation/getting-started/errors'''
                readOnly: true
                type: string
              message:
                description: Message providing more detail about the error that occurred,
                  if available.
                example: 'project: Missing input'
                readOnly: true
                type: string
              phrase:
                description: '**500 errors only**. A unique error phrase which can
                  be used when contacting developer support to help identify the exact
                  occurrence of the problem in Asana’s logs.'
                example: 6 sad squid snuggle softly
                readOnly: true
                type: string
            type: object
          type: array
      type: object
    Event:
      description: 'An *event* is an object representing a change to a resource that
        was

        observed by an event subscription.


        In general, requesting events on a resource is faster and subject to

        higher rate limits than requesting the resource itself. Additionally,

        change events bubble up - listening to events on a project would include

        when stories are added to tasks in the project, even on subtasks.


        Establish an initial sync token by making a request with no sync token.

        The response will be a `412` error - the same as if the sync token had

        expired.


        Subsequent requests should always provide the sync token from the

        immediately preceding call.


        Sync tokens may not be valid if you attempt to go ‘backward’ in the

        history by requesting previous tokens, though re-requesting the current

        sync token is generally safe, and will always return the same results.


        When you receive a `412 Precondition Failed` error, it means that the

        sync token is either invalid or expired. If you are attempting to keep a

        set of data in sync, this signals you may need to re-crawl the data.


        Sync tokens always expire after 24 hours, but may expire sooner,

        depending on load on the service.'
      properties:
        action:
          description: The type of action taken that triggered the event.
          example: changed
          readOnly: true
          type: string
        created_at:
          description: The timestamp when the event occurred.
          example: '2012-02-22T02:06:58.147Z'
          format: date-time
          readOnly: true
          type: string
        parent:
          description: For added/removed events, the parent that resource was added
            to or removed from. The parent will be `null` for other event types.
          nullable: true
          properties:
            id:
              example: 12345
              type: integer
            name:
              example: Bugs
              type: string
          readOnly: true
          type: object
        resource:
          description: 'The resource the event occurred on.


            **Note**: The resource that triggered the event may be different from

            the one that the events were requested for. For example, a

            subscription to a project will contain events for tasks contained

            within the project.'
          properties:
            id:
              example: 12345
              type: integer
            name:
              example: Bug Task
              type: string
          readOnly: true
          type: object
        type:
          description: 'The type of the resource that generated the event.


            **Note**: Currently, only tasks, projects and stories generate

            events.'
          example: task
          readOnly: true
          type: string
        user:
          $ref: '#/components/schemas/User'
          description: 'The user who triggered the event.


            **Note**: The event may be triggered by a different user than the

            subscriber. For example, if user A subscribes to a task and user B

            modified it, the event’s user will be user B. Note: Some events are

            generated by the system, and will have `null` as the user. API

            consumers should make sure to handle this case.'
          nullable: true
          readOnly: true
      type: object
    EventArray:
      description: The full record for all events that have occurred since the sync
        token was created.
      properties:
        data:
          items:
            $ref: '#/components/schemas/Event'
          type: array
        sync:
          description: A sync token to be used with the next call to the events endpoint.
          example: de4774f6915eae04714ca93bb2f5ee81
          type: string
      type: object
    OrganizationExport:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - properties:
          created_at:
            description: The time at which this export was requested.
            example: '2012-02-22T02:06:58.147Z'
            format: date-time
            readOnly: true
            type: string
          download_url:
            description: 'Download this URL to retreive the full export of the organization

              in JSON format. It will be compressed in a gzip (.gz) container.


              **Note**: May be null if the export is still in progress or

              failed.  If present, this URL may only be valid for 1 hour from

              the time of retrieval. You should avoid persisting this URL

              somewhere and rather refresh on demand to ensure you do not keep

              stale URLs.'
            example: https://asana-export.s3.amazonaws.com/export-4632784536274-20170127-43246.json.gz?AWSAccessKeyId=xxxxxxxx
            format: uri
            nullable: true
            readOnly: true
            type: string
          organization:
            description: '**Create-only**: The Organization that is being exported.
              This can only be specified at create time.'
            properties:
              id:
                example: 14916
                type: integer
              name:
                example: My Workspace
                type: string
            type: object
          state:
            description: The current state of the export.
            enum:
            - pending
            - started
            - finished
            - error
            example: started
            readOnly: true
            type: string
        type: object
      description: "An *organization_export* object represents a request to export\
        \ the\ncomplete data of an Organization in JSON format.\n\nTo export an Organization\
        \ using this API:\n\n* Create an `organization_export`\n  [request](https://asana.com/developers/api-reference/organization_exports#create)\n\
        \  and store the id that is returned.\n* Request the `organization_export`\
        \ every few minutes, until the `state`\n  field contains ‘finished’.\n* Download\
        \ the file located at the URL in the `download_url` field.\n* Exports can\
        \ take a long time, from several minutes to a few hours for\n  large Organizations.\n\
        \n**Note**: These endpoints are only available to [Service\nAccounts](https://asana.com/guide/help/premium/service-accounts)\
        \ of an\n[Enterprise](https://asana.com/enterprise) Organization."
    OrganizationExportObjectResponse:
      properties:
        data:
          $ref: '#/components/schemas/OrganizationExport'
      type: object
    Project:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - properties:
          archived:
            description: True if the project is archived, false if not. Archived projects
              do not show in the UI by default and may be treated differently for
              queries.
            example: false
            type: boolean
          color:
            description: Color of the project.
            enum:
            - dark-pink
            - dark-green
            - dark-blue
            - dark-red
            - dark-teal
            - dark-brown
            - dark-orange
            - dark-purple
            - dark-warm-gray
            - light-pink
            - light-green
            - light-blue
            - light-red
            - light-teal
            - light-brown
            - light-orange
            - light-purple
            - light-warm-gray
            example: light-green
            nullable: true
            type: string
          created_at:
            description: The time at which this project was created.
            example: '2012-02-22T02:06:58.147Z'
            format: date-time
            type: string
          current_status:
            description: 'A description of the project’s status containing a color
              (must be either null or one of: `green`, `yellow`, `red`) and a short
              description.'
            example:
              author:
                id: 12345
                name: Greg Bizarro
              color: green
              text: Everything is great
            nullable: true
            properties:
              author:
                $ref: '#/components/schemas/User'
              color:
                enum:
                - green
                - yellow
                - red
                example: green
                type: string
              text:
                example: All gravy!
                type: string
            type: object
          custom_field_settings:
            description: Array of Custom Field Settings (in compact form).
            items:
              $ref: '#/components/schemas/CustomFieldSettingsCompact'
            readOnly: true
            type: array
          custom_fields:
            description: 'Array of custom field values applied to the project. These
              represent

              the custom field values recorded on this project for a particular

              custom field. For example, these custom field values will contain

              an `enum_value` property for custom fields of type `enum`, a

              `string_value` property for custom fields of type `string`, and

              so on. Please note that the `id` returned on each custom field

              value *is identical* to the `id` of the custom field, which

              allows referencing the custom field metadata through the

              `/custom_fields/custom_field-id` endpoint.'
            items:
              $ref: '#/components/schemas/CustomField'
            readOnly: true
            type: array
          due_date:
            description: The day on which this project is due. This takes a date with
              format YYYY-MM-DD.
            example: '2012-03-26'
            format: date-time
            nullable: true
            type: string
          followers:
            description: Array of users following this project. Followers are a subset
              of members who receive all notifications for a project, the default
              notification setting when adding members to a project in-product.
            items:
              $ref: '#/components/schemas/User'
            readOnly: true
            type: array
          is_template:
            description: Whether or not the project is a custom template.
            example: false
            type: boolean
          layout:
            description: The layout (board or list view) of a project
            enum:
            - list
            - board
            readOnly: true
            type: string
          members:
            description: Array of users who are members of this project.
            items:
              $ref: '#/components/schemas/User'
            readOnly: true
            type: array
          modified_at:
            description: 'The time at which this project was last modified.

              **Note**: This does not currently reflect any changes in associations
              such as tasks or comments that may have been added or removed from the
              project.'
            example: '2012-02-22T02:06:58.147Z'
            format: date-time
            type: string
          name:
            description: Name of the project. This is generally a short sentence fragment
              that fits on a line in the UI for maximum readability. However, it can
              be longer.
            example: Stuff to buy
            type: string
          notes:
            description: More detailed, free-form textual information associated with
              the project.
            example: These are things we need to purchase.
            type: string
          owner:
            $ref: '#/components/schemas/User'
            description: The current owner of the project, may be null.
            nullable: true
          public:
            description: True if the project is public to the organization. If false,
              do not share this project with other users in this organization without
              explicitly checking to see if they have access.
            example: false
            type: boolean
          section_migration_status:
            description: '**Read-only** The section migration status of this project.'
            enum:
            - not_migrated
            - in_progress
            - completed
            example: not_migrated
            nullable: false
            readOnly: true
            type: string
          start_on:
            description: 'The day on which work for this project begins, or null if
              the project has no start date. This takes a date with `YYYY-MM-DD` format.

              **Note:** `due_on` or `due_at` must be present in the request when setting
              or unsetting the `start_on` parameter.'
            example: '2012-03-26'
            format: date
            nullable: true
            type: string
          team:
            $ref: '#/components/schemas/Team'
            description: '**Create-only**. The team that this project is shared with.
              This field only exists for projects in organizations.'
          workspace:
            $ref: '#/components/schemas/Workspace'
            description: '**Create-only**. The workspace or organization this project
              is associated with. Once created, projects cannot be moved to a different
              workspace. This attribute can only be specified at creation time.'
        type: object
      description: 'A *project* represents a prioritized list of tasks in Asana or
        a board

        with columns of tasks represented as cards. It exists in a single

        workspace or organization and is accessible to a subset of users in that

        workspace or organization, depending on its permissions.


        Projects in organizations are shared with a single team. You cannot

        currently change the team of a project via the API. Non-organization

        workspaces do not have teams and so you should not specify the team of

        project in a regular workspace.


        Followers of a project are a subset of the members of that project.

        Followers of a project will receive all updates including tasks created,

        added and removed from that project. Members of the project have access

        to and will receive status updates of the project. Adding followers to a

        project will add them as members if they are not already, removing

        followers from a project will not affect membership.'
    ProjectArray:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Project'
          type: array
      type: object
    ProjectMembership:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - properties:
          project:
            $ref: '#/components/schemas/Project'
          user:
            $ref: '#/components/schemas/User'
          write_access:
            description: Whether the user has full access to the project or has comment-only
              access.
            enum:
            - full_write
            - comment_only
            example: full_write
            readOnly: true
            type: string
        type: object
      description: With the introduction of “comment-only” projects in Asana, a user’s
        membership in a project comes with associated permissions. These permissions
        (whether a user has full access to the project or comment-only access) are
        accessible through the project memberships endpoints described here.
    ProjectMembershipArray:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ProjectMembership'
          type: array
      type: object
    ProjectMembershipObject:
      properties:
        data:
          $ref: '#/components/schemas/ProjectMembership'
      type: object
    ProjectObject:
      properties:
        data:
          $ref: '#/components/schemas/Project'
      type: object
    Section:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - properties:
          created_at:
            description: The time at which the section was created.
            example: '2012-02-22T02:06:58.147Z'
            format: date-time
            readOnly: true
            type: string
          name:
            description: The name of the section (i.e. the text displayed as the section
              header).
            example: Next Actions
            type: string
          projects:
            description: The projects which contain the section.
            items:
              $ref: '#/components/schemas/Project'
            readOnly: true
            type: array
        type: object
      description: 'A *section* is a subdivision of a project that groups tasks together.
        It

        can either be a header above a list of tasks in a list view or a column

        in a board view of a project.


        Sections are largely a shared idiom in Asana’s API for both list and

        board views of a project regardless of the project’s layout.


        The ‘memberships’ property when [getting a

        task](https://asana.com/developers/api-reference/tasks#get) will return

        the information for the section or the column under ‘section’ in the

        response.'
    SectionArray:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Section'
          type: array
      type: object
    SectionObject:
      properties:
        data:
          $ref: '#/components/schemas/Section'
      type: object
    Story:
      allOf:
      - $ref: '#/components/schemas/AsanaObjectWithSubtypes'
      - properties:
          created_at:
            description: Globally unique ID of the story.
            example: 1234
            format: date-time
            readOnly: true
            type: string
          created_by:
            $ref: '#/components/schemas/User'
            description: The user who created the story.
            nullable: true
            readOnly: true
          html_text:
            description: 'HTML formatted text for a comment. This will not include
              the name

              of the creator.


              **Note**: This field is only returned if explicitly requested

              using the `opt_fields` query parameter.'
            example: Get whatever Sashimi has.
            type: string
          is_pinned:
            description: Whether the story should be pinned on the resource.
            example: false
            type: boolean
          liked:
            description: 'True if the story is liked by the authorized user, false
              if not.


              **Note**: This property only exists for stories that provide

              likes.'
            example: false
            readOnly: true
            type: boolean
          likes:
            description: 'Array of users who have liked this story.


              **Note**: This property only exists for stories that provide

              likes.'
            items:
              $ref: '#/components/schemas/User'
            readOnly: true
            type: array
          num_likes:
            description: 'The number of users who have liked this story.


              **Note**: This property only exists for stories that provide

              likes.'
            example: 5
            readOnly: true
            type: integer
          source:
            description: The component of the Asana product the user used to trigger
              the story.
            example: web
            readOnly: true
            type: string
          target:
            description: The object this story is associated with. Currently may only
              be a task.
            properties:
              id:
                example: 1234
                type: integer
              name:
                example: Bug Task
                type: string
            readOnly: true
          text:
            description: '**Create-only**. Human-readable text for the story or comment.

              This will not include the name of the creator.


              **Note**: This is not guaranteed to be stable for a given type of

              story. For example, text for a reassignment may not always say

              “assigned to …”. The API currently does not provide a structured

              way of inspecting the meaning of a story.'
            example: marked today
            type: string
          type:
            description: The type of story this is.
            example: comment
            readOnly: true
            type: string
        type: object
      description: 'A *story* represents an activity associated with an object in
        the Asana

        system. Stories are generated by the system whenever users take actions

        such as creating or assigning tasks, or moving tasks between projects.

        *Comments* are also a form of user-generated story.


        Stories are a form of history in the system, and as such they are

        read-only. Once generated, it is not possible to modify a story.'
    StoryArray:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Story'
      type: object
    StoryObject:
      properties:
        data:
          $ref: '#/components/schemas/Story'
      type: object
    Tag:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - properties:
          color:
            description: Color of the tag.
            enum:
            - dark-pink
            - dark-green
            - dark-blue
            - dark-red
            - dark-teal
            - dark-brown
            - dark-orange
            - dark-purple
            - dark-warm-gray
            - light-pink
            - light-green
            - light-blue
            - light-red
            - light-teal
            - light-brown
            - light-orange
            - light-purple
            - light-warm-gray
            example: light-green
            type: string
          created_at:
            description: The time at which this tag was created.
            example: '2012-02-22T02:06:58.147Z'
            format: date-time
            type: string
          followers:
            description: Array of users following this tag.
            items:
              $ref: '#/components/schemas/User'
            readOnly: true
            type: array
          name:
            description: Name of the tag. This is generally a short sentence fragment
              that fits on a line in the UI for maximum readability. However, it can
              be longer.
            example: Stuff to buy
            type: string
          notes:
            description: More detailed, free-form textual information associated with
              the tag.
            example: These are things we need to purchase.
            type: string
          workspace:
            $ref: '#/components/schemas/Workspace'
        type: object
      description: 'A *tag* is a label that can be attached to any task in Asana.
        It exists

        in a single workspace or organization.


        Tags have some metadata associated with them, but it is possible that we

        will simplify them in the future so it is not encouraged to rely too

        heavily on it. Unlike projects, tags do not provide any ordering on the

        tasks they are associated with.'
    TagArray:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      type: object
    TagObject:
      properties:
        data:
          $ref: '#/components/schemas/Tag'
      type: object
    Task:
      allOf:
      - $ref: '#/components/schemas/AsanaObjectWithSubtypes'
      - properties:
          assignee:
            $ref: '#/components/schemas/User'
            nullable: true
          assignee_status:
            description: Scheduling status of this task for the user it is assigned
              to. This field can only be set if the assignee is non-null.
            enum:
            - today
            - upcoming
            - later
            - new
            - inbox
            example: upcoming
            type: string
          completed:
            description: True if the task is currently marked complete, false if not.
            example: false
            type: boolean
          completed_at:
            description: The time at which this task was completed, or null if the
              task is incomplete.
            example: '2012-02-22T02:06:58.147Z'
            format: date-time
            nullable: true
            readOnly: true
            type: string
          created_at:
            description: The time at which this task was created.
            example: '2012-02-22T02:06:58.147Z'
            format: date-time
            readOnly: true
            type: string
          custom_fields:
            description: 'Array of custom fields applied to the task. These custom
              fields

              represent the values recorded on this task for a particular

              custom field. For example, these fields will contain an

              `enum_value` property for custom fields of type `enum`, a

              `string_value` property for custom fields of type `string`, and

              so on. Please note that the `id` returned on each custom field

              value *is identical* to the `id` of the custom field, which

              allows referencing the custom field metadata through the

              `/custom_fields/custom_field-id` endpoint.'
            example:
            - enum_value:
                id: 126
                name: P1
              id: 1646
              name: Priority
              type: enum
            items:
              $ref: '#/components/schemas/CustomField'
            type: array
          dependencies:
            description: Array of resources referencing tasks that this task depends
              on. The objects contain only the ID of the dependency.
            example:
            - id: 1234
            - id: 4321
            items:
              properties:
                id:
                  example: 1234
                  type: integer
              type: object
            readOnly: true
            type: array
          dependents:
            description: Array of resources referencing tasks that depend on this
              task. The objects contain only the ID of the dependent.
            example:
            - id: 1234
            - id: 4321
            items:
              properties:
                id:
                  example: 1234
                  type: integer
              type: object
            readOnly: true
            type: array
          due_at:
            description: Date and time on which this task is due, or null if the task
              has no due time. This takes a UTC timestamp and should not be used together
              with `due_on`.
            example: '2012-02-22T02:06:58.147Z'
            format: date
            nullable: true
            type: string
          due_on:
            description: Date on which this task is due, or null if the task has no
              due date.  This takes a date with `YYYY-MM-DD` format and should not
              be used together with due_at.
            example: '2012-03-26'
            format: date
            nullable: true
            type: string
          external:
            description: '**OAuth Required**. The external field allows you to store
              app-specific metadata on tasks, including an id that can be used to
              retrieve tasks and a data blob that can store app-specific character
              strings. Note that you will need to authenticate with Oauth to access
              or modify this data. Once an external id is set, you can use the notation
              `external:custom_id` to reference your object anywhere in the API where
              you may use the original object id. See the page on Custom External
              Data for more details.'
            example:
              data: A blob of information
              id: my_id
            properties:
              data:
                example: A blob of information.
                type: string
              id:
                example: my_id
                type: integer
            type: object
          followers:
            description: Array of users following this task.
            example:
            - id: 1234
              name: Mittens
            items:
              $ref: '#/components/schemas/User'
            type: array
          hearted:
            description: '**Deprecated - please use likes instead** True if the task
              is hearted by the authorized user, false if not.'
            example: true
            type: boolean
          hearts:
            description: '**Deprecated - please use likes instead** Array of users
              who have hearted this task.'
            example:
            - id: 1234
              name: Mittens
            items:
              $ref: '#/components/schemas/User'
            readOnly: true
            type: array
          liked:
            description: True if the task is liked by the authorized user, false if
              not.
            example: true
            type: boolean
          likes:
            description: Array of users who have liked this task.
            example:
            - id: 1234
              name: Mittens
            items:
              $ref: '#/components/schemas/User'
            readOnly: true
            type: array
          memberships:
            description: '**Create-only**. Array of projects this task is associated
              with and the section it is in. At task creation time, this array can
              be used to add the task to specific sections. After task creation, these
              associations can be modified using the `addProject` and `removeProject`
              endpoints. Note that over time, more types of memberships may be added
              to this property.'
            example:
            - project:
                id: 1331
                name: Bugs
              section:
                id: 1123
                name: 'P1:'
            items:
              properties:
                project:
                  properties:
                    id:
                      example: 1234
                      type: integer
                    name:
                      example: Bugs
                      type: string
                  type: object
                section:
                  properties:
                    id:
                      example: 1123
                      type: integer
                    name:
                      example: 'P1:'
                      type: string
                  type: object
              type: object
            type: array
          modified_at:
            description: 'The time at which this task was last modified.


              **Note:** This does not currently reflect any changes in

              associations such as projects or comments that may have been

              added or removed from the task.'
            example: '2012-02-22T02:06:58.147Z'
            format: date-time
            readOnly: true
            type: string
          name:
            description: Name of the task. This is generally a short sentence fragment
              that fits on a line in the UI for maximum readability. However, it can
              be longer.
            example: Buy catnip
            type: string
          notes:
            description: More detailed, free-form textual information associated with
              the task.
            example: Mittens really likes the stuff from Humboldt.
            type: string
          num_hearts:
            description: '**Deprecated - please use likes instead** The number of
              users who have hearted this task.'
            example: 5
            readOnly: true
            type: integer
          num_likes:
            description: The number of users who have liked this task.
            example: 5
            readOnly: true
            type: integer
          parent:
            description: The parent of this task, or `null` if this is not a subtask.
              This property cannot be modified using a `PUT` request but you can change
              it with the `setParent` endpoint. You can create subtasks by using the
              subtasks endpoint.
            example:
            - id: 1234
              name: Bug task
            nullable: true
            properties:
              id:
                example: 1234
                type: integer
              name:
                example: Bug task
                type: string
            readOnly: true
            type: object
          projects:
            description: '**Create-only.** Array of projects this task is associated
              with. At task creation time, this array can be used to add the task
              to many projects at once. After task creation, these associations can
              be modified using the addProject and removeProject endpoints.'
            example:
            - id: 1331
              name: Stuff to buy
            items:
              $ref: '#/components/schemas/Project'
            type: array
          start_on:
            description: 'The day on which work begins for the task , or null if the
              task has

              no start date. This takes a date with `YYYY-MM-DD` format.


              **Note:** `due_on` or `due_at` must be present in the request when

              setting or unsetting the `start_on` parameter.'
            example: '2012-03-26'
            format: date
            nullable: true
            type: string
          tags:
            description: '**Create-only**. Array of tags associated with this task.
              This property may be specified on creation using just an array of tag
              IDs.  In order to change tags on an existing task use `addTag` and `removeTag`.'
            example:
            - id: 59746
              name: Grade A
            items:
              $ref: '#/components/schemas/Tag'
            type: array
          workspace:
            $ref: '#/components/schemas/Workspace'
            description: '*Create-only*. The workspace this task is associated with.
              Once created, task cannot be moved to a different workspace. This attribute
              can only be specified at creation time.'
            example:
            - id: 14916
              name: My Workspace
        type: object
      description: 'The *task* is the basic object around which many operations in
        Asana are

        centered. In the Asana application, multiple tasks populate the middle

        pane according to some view parameters, and the set of selected tasks

        determines the more detailed information presented in the details pane.


        A *section*, at its core, is a task whose name ends with the colon

        character `:`. Sections are unique in that they will be included in the

        *memberships* field of task objects returned in the API when the task is

        within a section. They can also be used to manipulate the ordering of a

        task within a project.


        [Queries](https://asana.com/developers/api-reference/tasks#query) return

        a compact representation of each object which is typically the id and

        name fields. Interested in a specific set of fields or all of the fields?

        Use [field

        selectors](https://asana.com/developers/documentation/getting-started/input-output-options)

        to manipulate what data is included in a response.'
    TaskArray:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Task'
          type: array
      type: object
    TaskObject:
      properties:
        data:
          $ref: '#/components/schemas/Task'
      type: object
    Team:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - properties:
          name:
            description: The name of the team
            example: Engineering
            type: string
        type: object
      description: 'A *team* is used to group related projects and people together
        within an

        organization. Each project in an organization is associated with a team.'
    TeamArray:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Team'
          type: array
      type: object
    TeamObject:
      properties:
        data:
          $ref: '#/components/schemas/Team'
      type: object
    User:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - properties:
          email:
            description: The user’s email address.
            example: gsanchez@example.com
            format: email
            readOnly: true
            type: string
          name:
            description: '**Read-only except when same user as requester**. The user’s
              name.'
            example: Greg Sanchez
            type: string
          photo:
            description: A map of the user’s profile photo in various sizes, or null
              if no photo is set. Sizes provided are 21, 27, 36, 60, and 128. Images
              are in PNG format.
            example:
              image_128x128: https://...
              image_21x21: https://...
              image_27x27: https://...
              image_36x36: https://...
              image_60x60: https://...
            nullable: true
            properties:
              image_128x128:
                format: uri
                type: string
              image_21x21:
                format: uri
                type: string
              image_27x27:
                format: uri
                type: string
              image_36x36:
                format: uri
                type: string
              image_60x60:
                format: uri
                type: string
            readOnly: true
            type: object
          workspaces:
            description: 'Workspaces and organizations this user may access.

              Note\: The API will only return workspaces and organizations that also
              contain the authenticated user.'
            items:
              $ref: '#/components/schemas/Workspace'
            readOnly: true
            type: array
        type: object
      description: 'A *user* object represents an account in Asana that can be given
        access

        to various workspaces, projects, and tasks.


        Like other objects in the system, users are referred to by numerical

        IDs. However, the special string identifier `me` can be used anywhere a

        user ID is accepted, to refer to the current authenticated user.'
    UserArray:
      properties:
        data:
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
    UserIdObject:
      description: A user ID object for specification with the addUser/removeUser
        endpoints.
      properties:
        data:
          properties:
            user:
              example: 12345
              oneOf:
              - type: integer
              - enum:
                - me
                type: string
              - format: email
                type: string
          type: object
      type: object
    UserObject:
      properties:
        data:
          $ref: '#/components/schemas/User'
      type: object
    Webhook:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - properties:
          active:
            description: If true, the webhook will send events - if false it is considered
              inactive and will not generate events.
            example: false
            type: boolean
          created_at:
            description: The timestamp when the webhook was created.
            example: '2012-02-22T02:06:58.147Z'
            format: date-time
            readOnly: true
            type: string
          last_failure_at:
            description: The timestamp when the webhook last received an error when
              sending an event to the target.
            example: '2012-02-22T02:06:58.147Z'
            format: date-time
            readOnly: true
            type: string
          last_failure_content:
            description: The contents of the last error response sent to the webhook
              when attempting to deliver events to the target.
            example: 500 Server Error\n\nCould not complete the request
            readOnly: true
            type: string
          last_success_at:
            description: The timestamp when the webhook last successfully sent an
              event to the target.
            example: '2012-02-22T02:06:58.147Z'
            format: date-time
            readOnly: true
            type: string
          resource:
            $ref: '#/components/schemas/AsanaNamedObject'
            description: The resource the webhook is subscribed to.
          target:
            description: The URL to receive the HTTP POST.
            example: https://example.com/receive-webhook/7654
            format: uri
            readOnly: true
            type: string
        type: object
      description: 'Webhooks allow an application to be notified of changes. This
        is in

        addition to the ability to fetch those changes directly as Events - in

        fact, Webhooks are just a way to receive

        [Events](https://asana.com/developers/api-reference/events) via HTTP POST

        at the time they occur instead of polling for them. For services

        accessible via HTTP this is often vastly more convenient, and if events

        are not too frequent can be significantly more efficient.


        In both cases, however, changes are represented as Event objects - refer

        to the [Events

        documentation](https://asana.com/developers/api-reference/events) for

        more information on what data these events contain.


        **Note**: While Webhooks send arrays of Event objects to their target,

        the Event objects themselves contain *only IDs*, rather than the actual

        resource they are referencing. Webhooks themselves contain only the

        information necessary to deliver the events to the desired target as they

        are generated.'
    WebhookArray:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Webhook'
          type: array
      type: object
    WebhookEvent:
      properties:
        action:
          description: The type of action taken that triggered the event.
          example: changed
          readOnly: true
          type: string
        created_at:
          description: The timestamp when the event occurred.
          example: '2012-02-22T02:06:58.147Z'
          format: date-time
          readOnly: true
          type: string
        parent:
          description: For added/removed events, the parent ID that resource was added
            to or removed from. The parent will be `null` for other event types.
          example: 12345
          nullable: true
          readOnly: true
          type: integer
        resource:
          description: 'The resource ID the event occurred on.


            **Note**: The resource that triggered the event may be different from

            the one that the events were requested for. For example, a

            subscription to a project will contain events for tasks contained

            within the project.'
          example: 32154
          readOnly: true
          type: integer
        type:
          description: 'The type of the resource that generated the event.


            **Note**: Currently, only tasks, projects and stories generate

            events.'
          example: task
          readOnly: true
          type: string
        user:
          description: 'The ID of the user who triggered the event.


            **Note**: The event may be triggered by a different user than the

            subscriber. For example, if user A subscribes to a task and user B

            modified it, the event’s user will be user B. Note: Some events are

            generated by the system, and will have `null` as the user. API

            consumers should make sure to handle this case.'
          example: 321654987
          nullable: true
          readOnly: true
          type: integer
      type: object
    WebhookObject:
      properties:
        data:
          $ref: '#/components/schemas/Webhook'
      type: object
    Workspace:
      allOf:
      - $ref: '#/components/schemas/AsanaObject'
      - properties:
          email_domains:
            description: The email domains that are associated with this workspace.
            example:
            - asana.com
            items:
              format: uri
              type: string
            type: array
          is_organization:
            description: Whether the workspace is an *organization*.
            example: false
            type: boolean
          name:
            description: The name of the workspace.
            example: My Favorite Workspace
            type: string
        type: object
      description: 'A *workspace* is the highest-level organizational unit in Asana.
        All

        projects and tasks have an associated workspace.


        An *organization* is a special kind of workspace that represents a

        company. In an organization, you can group your projects into teams.

        You can read more about how organizations work on the Asana Guide. To

        tell if your workspace is an organization or not, check its

        `is_organization` property.


        Over time, we intend to migrate most workspaces into organizations and

        to release more organization-specific functionality. We may eventually

        deprecate using workspace-based APIs for organizations. Currently, and

        until after some reasonable grace period following any further

        announcements, you can still reference organizations in any `workspace`

        parameter.'
    WorkspaceArray:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Workspace'
          type: array
      type: object
    WorkspaceObject:
      properties:
        data:
          $ref: '#/components/schemas/Workspace'
      type: object
  securitySchemes:
    oauth2:
      description: 'We require that applications designed to access the Asana API
        on behalf of multiple users implement OAuth 2.0.

        Asana supports both the Authorization Code Grant flow, and the Implicit Grant
        flows.'
      flows:
        authorizationCode:
          authorizationUrl: https://app.asana.com/-/oauth_authorize
          refreshUrl: https://app.asana.com/-/oauth_token
          scopes: {}
          tokenUrl: https://app.asana.com/-/oauth_token
        implicit:
          authorizationUrl: https://app.asana.com/-/oauth_authorize
          refreshUrl: https://api.getbase.com/oauth2/authorize
          scopes: {}
      type: oauth2
    personalAccessToken:
      scheme: bearer
      type: http
info:
  contact:
    name: Asana Support
    url: https://asana.com/support
  description: This is the interface for interacting with the [Asana Platform](https://asana.com/developers/).
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
  termsOfService: https://asana.com/terms
  title: Asana
  version: '1.0'
openapi: 3.0.0
paths:
  /attachments/{attachment-id}:
    get:
      description: Get the full record for a single attachment.
      operationId: getAttachment
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentObject'
          description: Successfully retrieved the record for a single attachment.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get a single attachment.
      tags:
      - Attachments
    parameters:
    - description: Globally unique identifier for the attachment.
      example: 12357
      in: path
      name: attachment-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /batch:
    parameters:
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: "There are many cases where you want to accomplish a variety of\
        \ work in\nthe Asana API but want to minimize the number of HTTP requests\
        \ you make.\nFor example:\n\n* Modern browsers limit the number of requests\
        \ that a single web page can\n  make at once.\n* Mobile apps will use more\
        \ battery life to keep the cellular radio on\n  when making a series of requests.\n\
        * There is an overhead cost to developing software that can make multiple\n\
        \  requests in parallel.\n* Some cloud platforms handle parallelism poorly,\
        \ or disallow it\n  entirely.\n* To make development easier in these use cases,\
        \ Asana provides a **batch\n  API** that enables developers to perform multiple\
        \ “actions” by making\n  only a single HTTP request.\n\n**Making a Batch Request**\n\
        \nTo make a batch request, send a `POST` request to `/batch`. Like other\n\
        `POST` endpoints, the body should contain a `data` envelope. Inside this\n\
        envelope should be a single `actions` field, containing a list of\n“action”\
        \ objects.  Each action represents a standard request to an\nexisting endpoint\
        \ in the Asana API.\n\n**The maximum number of actions allowed in a single\
        \ batch request is 10**.\nMaking a batch request with no actions in it will\
        \ result in a `400 Bad\nRequest`.\n\nWhen the batch API receives the list\
        \ of actions to execute, it will\ndispatch those actions to the already-implemented\
        \ endpoints specified by\nthe `relative_path` and `method` for each action.\
        \ This happens in\nparallel, so all actions in the request will be processed\
        \ simultaneously.\nThere is no guarantee of the execution order for these\
        \ actions, nor is\nthere a way to use the output of one action as the input\
        \ of another\naction (such as creating a task and then commenting on it).\n\
        \nThe response to the batch request will contain (within the `data`\nenvelope)\
        \ a list of result objects, one for each action. The results are\nguaranteed\
        \ to be in the same order as the actions in the request, e.g.,\nthe first\
        \ result in the response corresponds to the first action in the\nrequest.\n\
        \nThe batch API will always attempt to return a `200 Success` response with\n\
        individual result objects for each individual action in the request. Only\n\
        in certain cases (such as missing authorization or malformed JSON in the\n\
        body) will the entire request fail with another status code. Even if\nevery\
        \ individual action in the request fails, the batch API will still\nreturn\
        \ a `200 Success` response, and each result object in the response\nwill contain\
        \ the errors encountered with each action.\n\n**Rate Limiting**\n\nThe batch\
        \ API fully respects all of our rate limiting. This means that a\nbatch request\
        \ counts against *both* the standard rate limiter and the\nconcurrent request\
        \ limiter as though you had made a separate HTTP request\nfor every individual\
        \ action. For example, a batch request with five\nactions counts as five separate\
        \ requests in the standard rate limiter,\nand counts as five concurrent requests\
        \ in the concurrent request limiter.\nThe batch request itself incurs no cost.\n\
        \nIf any of the actions in a batch request would exceed any of the enforced\n\
        limits, the *entire* request will fail with a `429 Too Many Requests`\nerror.\
        \ This is to prevent the unpredictability of which actions might\nsucceed\
        \ if not all of them could succeed.\n\n**Restrictions**\n\nNot every API endpoint\
        \ can be accessed through the batch API.\nSpecifically, the following actions\
        \ cannot be taken and will result in a\n`400 Bad Request` for that action:\n\
        \n* Uploading attachments\n* Creating, getting, or deleting organization exports\n\
        * Any SCIM operations\n* Nested calls to the batch API"
      operationId: batchRequest
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    actions:
                      items:
                        $ref: '#/components/schemas/BatchRequest'
                      type: array
                  type: object
              type: object
        description: The requests to batch together via the Batch API.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  data:
                    items:
                      $ref: '#/components/schemas/BatchResponse'
                    type: array
                type: object
          description: Successfully completed the requested batch API operations.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Submit multiple requests in parallel via the Batch API.
      tags:
      - Batch API
  /custom_fields:
    parameters:
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Creates a new custom field in a workspace. Every custom field
        is required

        to be created in a specific workspace, and this workspace cannot be

        changed once set.


        A custom field’s name must be unique within a workspace and not conflict

        with names of existing task properties such as ‘Due Date’ or ‘Assignee’.

        A custom field’s type must be one of ‘text’, ‘enum’, or ‘number’.


        Returns the full record of the newly created custom field.'
      operationId: createCustomField
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  allOf:
                  - $ref: '#/components/schemas/CustomField'
                  - properties:
                      workspace:
                        description: The workspace to create a custom field in.
                        example: 1331
                        type: integer
                    required:
                    - workspace
                    type: object
              type: object
        description: The custom field object to create.
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldObject'
          description: Custom field successfully created.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Create a new custom field in a workspace.
      tags:
      - Custom Fields
  /custom_fields/{custom-field-id}:
    delete:
      description: 'A specific, existing custom field can be deleted by making a DELETE
        request on the URL for that custom field.

        Returns an empty data record.'
      operationId: deleteCustomField
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: The custom field was successfully deleted.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Delete a custom field.
      tags:
      - Custom Fields
    get:
      description: "Get the complete definition of a custom field’s metadata.\n\n\
        Since custom fields can be defined for one of a number of types, and\nthese\
        \ types have different data and behaviors, there are fields that are\nrelevant\
        \ to a particular type. For instance, as noted above, enum_options\nis only\
        \ relevant for the enum type and defines the set of choices that\nthe enum\
        \ could represent. The examples below show some of these\ntype-specific custom\
        \ field definitions.\n\n**Get the metadata for a custom field of type ‘text’**\n\
        \n```\n# Request\ncurl -H \"Authorization: Bearer <personal_access_token>\"\
        \ \\\nhttps://app.asana.com/api/1.0/custom_fields/124578\n```\n\n```\n# Response\n\
        HTTP/1.1 200\n{\n  \"data\": [\n    {\n      \"id\": 134679,\n      \"name\"\
        : \"Owner\",\n      \"description\": \"Person responsible for task\",\n  \
        \    \"type\": \"text\"\n    }\n  ]\n}\n```\n\n**Get the metadata for a custom\
        \ field of type ‘number’**\n\n```\n# Request\ncurl -H \"Authorization: Bearer\
        \ <personal_access_token>\" \\\nhttps://app.asana.com/api/1.0/custom_fields/124578\n\
        ```\n\n```\n# Response\nHTTP/1.1 200\n{\n  \"data\": [\n    {\n      \"id\"\
        : 938271,\n      \"name\": \"Price\",\n      \"description\": \"In US Dollars\"\
        ,\n      \"type\": \"number\",\n      \"precision\": 2\n    }\n  ]\n}\n```\n\
        \n**Get the metadata for a custom field when that field is of type ‘enum’.**\n\
        \n```\n# Request\ncurl -H \"Authorization: Bearer <personal_access_token>\"\
        \ \\\nhttps://app.asana.com/api/1.0/custom_fields/124578\n```\n\n```\n# Response\n\
        HTTP/1.1 200\n{\n  \"data\": [\n    {\n      \"id\": 124578,\n      \"name\"\
        : \"Priority\",\n      \"description\": \"Development team priority\",\n \
        \     \"type\": \"enum\",\n      \"enum_options\": [\n        {\n        \
        \  \"id\": 789,\n          \"name\": \"Low\",\n          \"enabled\": true,\n\
        \          \"color\": \"blue\"\n        },\n        {\n          \"id\": 208,\n\
        \          \"name\": \"Medium\",\n          \"enabled\": false,\n        \
        \  \"color\": \"yellow\"\n        },\n        {\n          \"id\": 439,\n\
        \          \"name\": \"High\",\n          \"enabled\": true,\n          \"\
        color\": \"red\"\n        }\n      ]\n    }\n  ]\n}\n```"
      operationId: getCustomField
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldObject'
          description: Successfully retrieved the complete definition of a custom
            field’s metadata.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the complete definition of a custom field’s metadata.
      tags:
      - Custom Fields
    parameters:
    - description: Globally unique identifier for the custom field.
      example: 124578
      in: path
      name: custom-field-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    put:
      description: 'A specific, existing custom field can be updated by making a PUT
        request on the URL for that custom field. Only the fields provided in the
        `data` block will be updated; any unspecified fields will remain unchanged

        When using this method, it is best to specify only those fields you wish to
        change, or else you may overwrite changes made by another user since you last
        retrieved the custom field.

        A custom field’s `type` cannot be updated.

        An enum custom field’s `enum_options` cannot be updated with this endpoint.
        Instead see “Work With Enum Options” for information on how to update `enum_options`.

        Returns the complete updated custom field record.'
      operationId: updateCustomField
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomFieldObject'
        description: The custom field object with all updated properties.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldObject'
          description: The custom field was successfully updated.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Update a custom field.
      tags:
      - Custom Fields
  /custom_fields/{custom-field-id}/enum_options:
    parameters:
    - description: Globally unique identifier for the custom field.
      example: 124578
      in: path
      name: custom-field-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Creates an enum option and adds it to this custom field’s list
        of enum options. A custom field can have at most 50 enum options (including
        disabled options). By default new enum options are inserted at the end of
        a custom field’s list.

        Returns the full record of the newly created enum option.'
      operationId: createCustomFieldEnumOption
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  allOf:
                  - $ref: '#/components/schemas/EnumOption'
                  - oneOf:
                    - properties:
                        insert_before:
                          description: An existing enum option within this custom
                            field before which the new enum option should be inserted.
                            Cannot be provided together with after_enum_option.
                          example: 12345
                          type: integer
                      type: object
                    - properties:
                        insert_after:
                          description: An existing enum option within this custom
                            field after which the new enum option should be inserted.
                            Cannot be provided together with before_enum_option.
                          example: 12345
                          type: integer
                      type: object
              type: object
        description: The enum option object to create.
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/EnumOption'
                type: object
          description: Custom field enum option successfully created.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Creates an enum option.
      tags:
      - Custom Fields
  /custom_fields/{custom-field-id}/enum_options/insert:
    parameters:
    - description: Globally unique identifier for the custom field.
      example: 124578
      in: path
      name: custom-field-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: Moves a particular enum option to be either before or after another
        specified enum option in the custom field.
      operationId: reorderCustomFieldEnum
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  allOf:
                  - $ref: '#/components/schemas/EnumOption'
                  - properties:
                      enum_option:
                        description: The ID of the enum option to relocate.
                        example: 97285
                        type: integer
                    type: object
                  - oneOf:
                    - properties:
                        before_enum_option:
                          description: An existing enum option within this custom
                            field before which the new enum option should be inserted.
                            Cannot be provided together with after_enum_option.
                          example: 12345
                          type: integer
                      type: object
                    - properties:
                        after_enum_option:
                          description: An existing enum option within this custom
                            field after which the new enum option should be inserted.
                            Cannot be provided together with before_enum_option.
                          example: 12345
                          type: integer
                      type: object
              type: object
        description: The enum option object to create.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/EnumOption'
                type: object
          description: Custom field enum option successfully reordered.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Reorder an enum in a custom field.
      tags:
      - Custom Fields
  /enum_options/{enum-option-id}:
    parameters:
    - description: Globally unique identifier for the enum option.
      example: 124578
      in: path
      name: enum-option-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    put:
      description: 'Updates an existing enum option. Enum custom fields require at
        least one enabled enum option.

        Returns the full record of the updated enum option.'
      operationId: updateCustomFieldEnum
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  $ref: '#/components/schemas/EnumOption'
              type: object
        description: The enum option object to update
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  data:
                    $ref: '#/components/schemas/EnumOption'
                type: object
          description: Successfully updated the specified custom field enum.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Update an existing custom field enum option.
      tags:
      - Custom Fields
  /events:
    get:
      description: 'Returns the full record for all events that have occurred since
        the sync

        token was created.


        A GET request to the endpoint /[path_to_resource]/events can be made in

        lieu of including the resource ID in the data for the request.'
      operationId: getEvents
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventArray'
          description: Successfully retrieved events.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get events on a resource.
      tags:
      - Events
    parameters:
    - description: A resource ID to subscribe to. The resource can be a task or project.
      example: 12345
      in: query
      name: resource
      required: true
      schema:
        type: integer
    - description: 'A sync token received from the last request, or none on first
        sync. Events will be returned from the point in time that the sync token was
        generated.

        **Note**: On your first request, omit the sync token. The response will be
        the same as for an expired sync token, and will include a new valid sync token.If
        the sync token is too old (which may happen from time to time) the API will
        return a `412 Precondition Failed` error, and include a fresh sync token in
        the response.'
      example: de4774f6915eae04714ca93bb2f5ee81
      in: query
      name: sync
      required: false
      schema:
        type: string
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /organization_exports:
    parameters:
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: This method creates a request to export an Organization. Asana
        will complete the export at some point after you create the request.
      operationId: createOrganizationExport
      requestBody:
        content:
          application/json:
            schema:
              properties:
                organization:
                  description: Globally unique identifier for the workspace or organization.
                  example: 1331
                  type: integer
              type: object
        description: The organization to export.
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationExportObjectResponse'
          description: Successfully created organization export request.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Create a request to export an organization.
      tags:
      - Organization Exports
  /organization_exports/{organization-export-id}:
    get:
      description: Returns details of a previously-requested Organization export.
      operationId: getOrganizationExport
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationExportObjectResponse'
          description: Successfully retrieved organization export object.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the details of a previously-requested Organization export.
      tags:
      - Organization Exports
    parameters:
    - description: Globally unique identifier for the organization export.
      example: 133549
      in: path
      name: organization-export-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /organizations/{organization-id}/teams:
    get:
      description: Returns the compact records for all teams in the organization visible
        to the authorized user.
      operationId: getAllTeams
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamArray'
          description: Returns the team records for all teams in the organization
            or workspace accessible to the authenticated user.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the teams in an organization.
      tags:
      - Team
    parameters:
    - description: Globally unique identifier for the workspace or organization.
      example: 1331
      in: path
      name: organization-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /project_memberships/{project-id}:
    get:
      description: Returns the complete project record for a single project membership.
      operationId: getProjectMembership
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMembershipObject'
          description: Successfully retrieved the requested project membership.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the complete project record for a single project membership.
      tags:
      - Project Memberships
    parameters:
    - $ref: '#/components/parameters/project-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /projects:
    get:
      description: Returns the compact project records for some filtered set of projects.
        Use one or more of the parameters provided to filter the projects returned.
      operationId: getProjects
      parameters:
      - description: The workspace or organization to filter projects on.
        example: 1331
        in: query
        name: workspace
        schema:
          type: integer
      - description: The team to filter projects on.
        example: 14916
        in: query
        name: team
        schema:
          type: integer
      - $ref: '#/components/parameters/archived-query-param'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectArray'
          description: Successfully retrieved projects.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Returns the project records for some filtered set of projects.
      tags:
      - Projects
    parameters:
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Create a new project in a workspace or team.


        Every project is required to be created in a specific workspace or

        organization, and this cannot be changed once set. Note that you can use

        the `workspace` parameter regardless of whether or not it is an

        organization.


        If the workspace for your project is an organization, you must also

        supply a `team` to share the project with.


        Returns the full record of the newly created project.'
      operationId: createProject
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    name:
                      description: The name of the project.
                      example: Bug Project
                      type: string
                    notes:
                      description: The description of the project.
                      example: For tracking pesky bugs.
                      type: string
                    team:
                      description: If creating in an organization, the specific team
                        to create the project in.
                      example: 14916
                      type: integer
                    workspace:
                      description: The workspace or organization to create the project
                        in.
                      example: 1331
                      type: integer
                  type: object
              type: object
        description: The project to create.
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectObject'
          description: Successfully retrieved projects.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Create a new project in a workspace or team.
      tags:
      - Projects
  /projects/{project-id}:
    delete:
      description: 'A specific, existing project can be deleted by making a DELETE
        request on

        the URL for that project.


        Returns an empty data record.'
      operationId: deleteProject
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Successfully deleted the specified project.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Delete a single project.
      tags:
      - Projects
    get:
      description: Returns the complete project record for a single project.
      operationId: getProject
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectObject'
          description: Successfully retrieved the requested project.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the complete project record for a single project.
      tags:
      - Projects
    parameters:
    - $ref: '#/components/parameters/project-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    put:
      description: 'A specific, existing project can be updated by making a PUT request
        on

        the URL for that project. Only the fields provided in the `data` block

        will be updated; any unspecified fields will remain unchanged.


        When using this method, it is best to specify only those fields you wish

        to change, or else you may overwrite changes made by another user since

        you last retrieved the task.


        Returns the complete updated project record.'
      operationId: updateProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectObject'
        description: The updated fields for the project.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectObject'
          description: Successfully updated the project.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Update a single project.
      tags:
      - Projects
  /projects/{project-id}/addCustomFieldSetting:
    parameters:
    - $ref: '#/components/parameters/project-path-id'
    - description: The custom field to associate with this project.
      example: 14916
      in: query
      name: custom_field
      required: true
      schema:
        type: integer
    - description: Whether this field should be considered "important" to this project.
        This may cause it to be displayed more prominently, for example in the task
        grid.
      example: true
      in: query
      name: is_important
      schema:
        type: boolean
    - description: An id of a Custom Field Setting on this project, before which the
        new Custom Field Setting will be added.  `insert_before` and `insert_after`
        parameters cannot both be specified.
      example: 1331
      in: query
      name: insert_before
      schema:
        type: integer
    - description: An id of a Custom Field Setting on this project, after which the
        new Custom Field Setting will be added.  `insert_before` and `insert_after`
        parameters cannot both be specified.
      example: 1331
      in: query
      name: insert_after
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    post:
      description: Custom fields are associated with projects by way of custom field
        settings.  This method creates a setting for the project.
      operationId: project.addCustomFieldSetting
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Successfully added the custom field to the project.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Add a custom field to a project.
      tags:
      - Projects
      - Custom Fields
  /projects/{project-id}/custom_field_settings:
    get:
      description: Returns a list of all of the custom fields settings on a project,
        in compact form. Note that, as in all queries to collections which return
        compact representation, `opt_fields` and `opt_expand` can be used to include
        more data than is returned in the compact representation. See the [getting
        started guide on input/output options](https://asana.com/developers/documentation/getting-started/input-output-options)
        for more information.
      operationId: getCustomFieldSettingsForProject
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldSettingsArray'
          description: Successfully retrieved custom field settings objects for a
            project.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Query for all of the custom fields settings on a project.
      tags:
      - Custom Field Settings
    parameters:
    - description: The ID of the project for which to list custom field settings.
      example: 13579
      in: path
      name: project-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /projects/{project-id}/project_memberships:
    get:
      description: Returns the compact project membership records for the project.
      operationId: getProjectMembershipsForProject
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectMembershipArray'
          description: Successfully retrieved the requested project's memberships.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the compact project membership records for the project.
      tags:
      - Project Memberships
    parameters:
    - $ref: '#/components/parameters/project-path-id'
    - $ref: '#/components/parameters/user-query-param'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /projects/{project-id}/removeCustomFieldSetting:
    parameters:
    - $ref: '#/components/parameters/project-path-id'
    - description: The custom field to remove from this project.
      example: 14916
      in: query
      name: custom_field
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    post:
      description: Removes a custom field setting from a project.
      operationId: project.removeCustomFieldSetting
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Successfully removed the custom field from the project.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Remove a custom field from a project.
      tags:
      - Projects
      - Custom Fields
  /projects/{project-id}/sections:
    get:
      description: Returns the compact records for all sections in the specified project.
      operationId: getSectionsInProject
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionArray'
          description: Successfully retrieved sections in project.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the compact records for all sections in the specified project.
      tags:
      - Sections
    parameters:
    - $ref: '#/components/parameters/project-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Creates a new section in a project.

        Returns the full record of the newly created section.'
      operationId: createSectionInProject
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  description: The text to be displayed as the section name. This
                    cannot be an empty string.
                  example: Next Actions
                  type: string
                project:
                  description: The project to create the section in
                  example: 13579
                  type: integer
              required:
              - project
              - name
              type: object
        description: The section to create.
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionObject'
          description: Successfully created the specified section.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Creates a new section in a project.
      tags:
      - Sections
  /projects/{project-id}/sections/insert:
    parameters:
    - $ref: '#/components/parameters/project-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Move sections relative to each other in a board view. One of

        before_section or after_section is required.


        Sections cannot be moved between projects.


        At this point in time, moving sections is not supported in list views,

        only board views.


        Returns an empty data block.'
      operationId: moveSection
      requestBody:
        content:
          application/json:
            schema:
              properties:
                after_section:
                  description: Insert the given section immediately after the section
                    specified by this parameter.
                  example: 987654
                  type: integer
                before_section:
                  description: Insert the given section immediately before the section
                    specified by this parameter.
                  example: 86420
                  type: integer
                project:
                  description: The project in which to reorder the given section.
                  example: 123456
                  type: integer
                section:
                  description: The section to reorder.
                  example: 321654
                  type: integer
              required:
              - project
              - section
              - before_section
              - after_section
              type: object
        description: The section's move action.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Successfully moved the specified section.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Move sections relative to each other in a board view.
      tags:
      - Sections
  /projects/{project-id}/tasks:
    get:
      description: Returns the compact task records for all tasks within the given
        project, ordered by their priority within the project. Tasks can exist in
        more than one project at a time.
      operationId: getProjectTasks
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskArray'
          description: Successfully retrieved the requested project's tasks.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get all tasks within the given project.
      tags:
      - Projects
      - Tasks
    parameters:
    - $ref: '#/components/parameters/project-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /sections/{section-id}:
    delete:
      description: 'A specific, existing section can be deleted by making a DELETE
        request on

        the URL for that section.


        Note that sections must be empty to be deleted.


        The last remaining section in a board view cannot be deleted.


        Returns an empty data block.'
      operationId: deleteSection
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Successfully deleted the specified section.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Delete a section.
      tags:
      - Sections
    get:
      description: Returns the complete record for a single section.
      operationId: getSection
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionObject'
          description: Successfully retrieved section.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the complete record for a single section.
      tags:
      - Sections
    parameters:
    - $ref: '#/components/parameters/section-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    put:
      description: 'A specific, existing section can be updated by making a PUT request
        on

        the URL for that project. Only the fields provided in the `data` block

        will be updated; any unspecified fields will remain unchanged. (note that

        at this time, the only field that can be updated is the `name` field.)


        When using this method, it is best to specify only those fields you wish

        to change, or else you may overwrite changes made by another user since

        you last retrieved the task.


        Returns the complete updated section record.'
      operationId: updateSection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SectionObject'
        description: The section to create.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SectionObject'
          description: Successfully updated the specified section.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Update a section.
      tags:
      - Sections
  /sections/{section-id}/tasks:
    get:
      description: '**Board view only**: Returns the compact section records for all
        tasks within the given section.'
      operationId: getSectionTasks
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskArray'
          description: Successfully retrieved the section's tasks.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get all tasks in a given section.
      tags:
      - Sections
      - Tasks
    parameters:
    - $ref: '#/components/parameters/section-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /stories/{story-id}:
    get:
      description: Returns the full record for a single story.
      operationId: getStory
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryObject'
          description: Successfully retrieved the specified story.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Returns the full record for a single story.
      tags:
      - Stories
    parameters:
    - description: The globally unique identifier for the story.
      example: 1234
      in: path
      name: story-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    put:
      description: Updates the story and returns the full record for the updated story.
        Only comment stories can have their text updated, and only comment stories
        and attachment stories can be pinned. Only one of text and html_text can be
        specified.
      operationId: updateStory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoryObject'
        description: The comment story to update.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryObject'
          description: Successfully retrieved the specified story.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Update a story.
      tags:
      - Stories
  /tags:
    get:
      description: Returns the compact tag records for some filtered set of tags.
        Use one or more of the parameters provided to filter the tags returned.
      operationId: queryTags
      parameters:
      - description: The workspace to filter tags on.
        example: 1331
        in: query
        name: workspace
        schema:
          type: integer
      - description: Only return tags whose `archived` field takes on the value of
          this parameter.
        example: false
        in: query
        name: archived
        schema:
          type: boolean
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagArray'
          description: Successfully retrieved the specified set of tags.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get a set of tags.
      tags:
      - Tags
    parameters:
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Creates a new tag in a workspace or organization.


        Every tag is required to be created in a specific workspace or

        organization, and this cannot be changed once set. Note that you can use

        the workspace parameter regardless of whether or not it is an

        organization.


        Returns the full record of the newly created tag.'
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagObject'
        description: The tag to create.
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagObject'
          description: Successfully created the newly specified tag.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Creates a new tag in a workspace or organization.
      tags:
      - Tags
  /tags/{tag-id}:
    get:
      description: Returns the complete tag record for a single tag.
      operationId: getTag
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagObject'
          description: Successfully retrieved the specified tag.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get a single tag.
      tags:
      - Tags
    parameters:
    - $ref: '#/components/parameters/tag-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    put:
      description: 'Updates the properties of a tag. Only the fields provided in the
        `data`

        block will be updated; any unspecified fields will remain unchanged.


        When using this method, it is best to specify only those fields you wish

        to change, or else you may overwrite changes made by another user since

        you last retrieved the task.


        Returns the complete updated tag record.'
      operationId: updateTag
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagObject'
          description: Successfully updated the specified tag.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Updates the properties of a tag.
      tags:
      - Tags
  /tags/{tag-id}/tasks:
    get:
      description: Returns the compact task records for all tasks with the given tag.
        Tasks can have more than one tag at a time.
      operationId: getTagTasks
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskArray'
          description: Successfully retrieved the tasks associated with the specified
            tag.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the compact task records for all tasks with the given tag.
      tags:
      - Tags
      - Tasks
    parameters:
    - $ref: '#/components/parameters/tag-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /tasks:
    get:
      description: Returns the compact task records for some filtered set of tasks.
        Use one or more of the parameters provided to filter the tasks returned. You
        must specify a `project` or `tag` if you do not specify `assignee` and `workspace`.
      operationId: queryTasks
      parameters:
      - description: 'The assignee to filter tasks on.

          **Note**: If you specify `assignee`, you must also specify the `workspace`
          to filter on.'
        examples:
          email:
            summary: An email address for a user
            value: sashimi@asana.com
          id:
            summary: A globally unique identifier for the user
            value: 14641
          me:
            summary: The keyword 'me' to indicate the current user making the request.
            value: me
        in: query
        name: assignee
        schema:
          oneOf:
          - type: integer
          - enum:
            - me
            type: string
          - format: email
            type: string
      - description: The project to filter tasks on.
        example: 321654
        in: query
        name: project
        schema:
          type: integer
      - description: 'The section to filter tasks on.

          **Note**: Currently, this is only supported in board views.'
        example: 321654
        in: query
        name: section
        schema:
          type: integer
      - description: 'The workspace to filter tasks on.

          **Note**: If you specify `workspace`, you must also specify the `assignee`
          to filter on.'
        example: 321654
        in: query
        name: workspace
        schema:
          type: integer
      - description: Only return tasks that are either incomplete or that have been
          completed since this time.
        example: '2012-02-22T02:06:58.158Z'
        in: query
        name: completed_since
        schema:
          oneOf:
          - example: '2012-02-22T02:06:58.158Z'
            format: date-time
            type: string
          - enum:
            - now
            type: string
      - description: 'Only return tasks that have been modified since the given time.


          **Note**: A task is considered “modified” if any of its properties

          change, or associations between it and other objects are modified

          (e.g.  a task being added to a project). A task is not considered

          modified just because another object it is associated with (e.g. a

          subtask) is modified. Actions that count as modifying the task

          include assigning, renaming, completing, and adding stories.'
        example: '2012-02-22T02:06:58.158Z'
        in: query
        name: modified_since
        schema:
          oneOf:
          - example: '2012-02-22T02:06:58.158Z'
            format: date-time
            type: string
          - enum:
            - now
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskArray'
          description: Successfully retrieved requested tasks.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Query for tasks.
      tags:
      - Tasks
    parameters:
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Creating a new task is as easy as POSTing to the `/tasks` endpoint
        with a

        data block containing the fields you’d like to set on the task. Any

        unspecified fields will take on default values.


        Every task is required to be created in a specific workspace, and this

        workspace cannot be changed once set. The workspace need not be set

        explicitly if you specify `projects` or a `parent` task instead.


        `projects` can be a comma separated list of projects, or just a single

        project the task should belong to.'
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskObject'
        description: The task to create.
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskObject'
          description: Successfully created a new task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Create a task.
      tags:
      - Tasks
  /tasks/{task-id}:
    delete:
      description: 'A specific, existing task can be deleted by making a DELETE request
        on

        the URL for that task. Deleted tasks go into the “trash” of the user

        making the delete request. Tasks can be recovered from the trash within a

        period of 30 days; afterward they are completely removed from the system.


        Returns an empty data record.'
      operationId: deleteTask
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Successfully deleted the specified task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Delete a task.
      tags:
      - Tasks
    get:
      description: Returns the complete task record for a single task.
      operationId: getTask
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskObject'
          description: Successfully retrieved the specified task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the complete task record for a single task.
      tags:
      - Tasks
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    put:
      description: 'A specific, existing task can be updated by making a PUT request
        on the

        URL for that task. Only the fields provided in the `data` block will be

        updated; any unspecified fields will remain unchanged.


        When using this method, it is best to specify only those fields you wish

        to change, or else you may overwrite changes made by another user since

        you last retrieved the task.


        Returns the complete updated task record.'
      operationId: updateTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskObject'
        description: The task to update.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskObject'
          description: Successfully updated the specified task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Update a task.
      tags:
      - Tasks
  /tasks/{task-id}/addDependencies:
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: Marks a set of tasks as dependencies of this task, if they are
        not already dependencies. *A task can have at most 15 dependencies*.
      operationId: addTaskDependencies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DependencyArray'
        description: The list of tasks to set as dependencies.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskArray'
          description: Successfully set the specified dependencies on the task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Set dependencies for a given task.
      tags:
      - Tasks
  /tasks/{task-id}/addDependents:
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: Marks a set of tasks as dependents of this task, if they are not
        already dependents. *A task can have at most 30 dependents*.
      operationId: addTaskDependents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DependentArray'
        description: The list of tasks to add as dependents.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskArray'
          description: Successfully set the specified dependents on the given task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Set dependents for a given task.
      tags:
      - Tasks
  /tasks/{task-id}/addFollowers:
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Adds a tag to a task. Returns an empty data block.

        Each task can be associated with zero or more followers in the system.

        Requests to add/remove followers, if successful, will return the complete
        updated task record, described above.'
      operationId: addFollowerToTask
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    followers:
                      description: The tag to add to the task.
                      example:
                      - 13579
                      - 321654
                      items:
                        type: integer
                      type: array
                  required:
                  - followers
                  type: object
              type: object
        description: The tag to add to the task.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Successfully added the specified tag to the task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Adds followers to a task.
      tags:
      - Tasks
  /tasks/{task-id}/addProject:
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Adds the task to the specified project, in the optional location

        specified. If no location arguments are given, the task will be added to

        the end of the project.


        `addProject` can also be used to reorder a task within a project or

        section that already contains it.


        At most one of `insert_before`, `insert_after`, or `section` should be

        specified. Inserting into a section in an non-order-dependent way can be

        done by specifying section, otherwise, to insert within a section in a

        particular place, specify `insert_before` or `insert_after` and a task

        within the section to anchor the position of this task.


        Returns an empty data block.'
      operationId: addProjectToTask
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    insert_after:
                      description: A task in the project to insert the task after,
                        or `null` to insert at the beginning of the list.
                      example: 124816
                      nullable: true
                      type: integer
                    insert_before:
                      description: A task in the project to insert the task before,
                        or `null` to insert at the end of the list.
                      example: 432134
                      nullable: true
                      type: integer
                    project:
                      description: The project to add the task to.
                      example: 13579
                      type: integer
                    section:
                      description: A section in the project to insert the task into.
                        The task will be inserted at the bottom of the section.
                      example: 987654
                      nullable: true
                      type: integer
                  required:
                  - project
                  type: object
              type: object
        description: The project to add the task to.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Successfully added the specified project to the task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Adds the project to the specified task.
      tags:
      - Tasks
  /tasks/{task-id}/addTag:
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: Adds a tag to a task. Returns an empty data block.
      operationId: addTagToTask
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    tag:
                      description: The tag to add to the task.
                      example: 13579
                      type: integer
                  required:
                  - tag
                  type: object
              type: object
        description: The tag to add to the task.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Successfully added the specified tag to the task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Adds a tag to a task
      tags:
      - Tasks
  /tasks/{task-id}/attachments:
    get:
      description: Returns the compact records for all attachments on the task.
      operationId: getAttachmentsForTask
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentArray'
          description: Successfully retrieved the compact records for all attachments
            on the task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get all attachments for a task.
      tags:
      - Attachments
    parameters:
    - description: Globally unique identifier for the task.
      example: 124816
      in: path
      name: task-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Upload an attachment.


        This method uploads an attachment to a task and returns the compact

        record for the created attachment object. It is not possible to attach

        files from third party services such as Dropbox, Box & Google Drive via

        the API. You must download the file content first and then upload it as

        any other attachment.


        The 100MB size limit on attachments in Asana is enforced on this endpoint.


        This endpoint expects a multipart/form-data encoded request containing

        the full contents of the file to be uploaded.


        Below is an example of what a well formed multipart/form-data encoded

        request might look like.


        ```

        Authorization: Basic <BASE64_ENCODED_API_KEY>

        Content-Type: multipart/form-data; boundary=<UNIQUE_BOUNDARY>

        User-Agent: Java/1.7.0_76

        Host: localhost

        Accept: */*

        Connection: keep-alive

        Content-Length: 141

        ```


        ```

        --<UNIQUE_BOUNDARY>

        Content-Disposition: form-data; name="file"; filename="example.txt"

        Content-Type: text/plain

        ```


        ```

        <RAW_FILE_DATA>

        ```


        ```

        --<UNIQUE_BOUNDARY>--

        ```


        Requests made should follow the HTTP/1.1 specification that line

        terminators are of the form `CRLF` or `\r\n` outlined

        [here](http://www.w3.org/Protocols/HTTP/1.1/draft-ietf-http-v11-spec-01#Basic-Rules)

        in order for the server to reliably and properly handle the request.'
      operationId: uploadAttachmentToTask
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: binary
                  type: string
        description: 'The file you want to upload.


          **Note when using curl:**


          Be sure to add an `‘@’` before the file path, and use the `—form`

          option instead of the `-d` option.


          When uploading PDFs with curl, force the content-type to be pdf by

          appending the content type to the file path: `—form

          “file=@file.pdf;type=application/pdf”`.'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentObject'
          description: Successfully uploaded the attachment to the task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Upload an attachment.
      tags:
      - Attachments
  /tasks/{task-id}/dependencies:
    get:
      description: Returns the compact representations of all of the dependencies
        of a task.
      operationId: getTaskDependencies
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskArray'
          description: Successfully retrieved the specified task's dependencies.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the dependencies for a task.
      tags:
      - Tasks
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /tasks/{task-id}/dependents:
    get:
      description: Returns the compact representations of all of the dependents of
        a task.
      operationId: getTaskDependents
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskArray'
          description: Successfully retrieved the specified dependents of the task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the dependents of a task.
      tags:
      - Tasks
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /tasks/{task-id}/projects:
    get:
      description: Returns a compact representation of all of the projects the task
        is in.
      operationId: getTaskProjects
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectArray'
          description: Successfully retrieved the projects for the given task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get all of the projects the task is in.
      tags:
      - Tasks
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /tasks/{task-id}/removeDependencies:
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: Unlinks a set of dependencies from this task.
      operationId: removeTaskDependencies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DependencyArray'
        description: The list of tasks to unlink as dependencies.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskArray'
          description: Successfully unlinked the dependencies from the specified task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Unlinks a set of dependencies from this task.
      tags:
      - Tasks
  /tasks/{task-id}/removeDependents:
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: Unlinks a set of dependents from this task.
      operationId: removeTaskDependents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DependentArray'
        description: The list of tasks to remove as dependents.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskArray'
          description: Successfully unlinked the specified tasks as dependents.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Unlinks a set of dependents from this task.
      tags:
      - Tasks
  /tasks/{task-id}/removeFollowers:
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: Removes each of the specified followers from the task if they are
        following. Returns the complete, updated record for the affected task.
      operationId: removeFollowerToTask
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    followers:
                      description: The tag to add to the task.
                      example:
                      - 13579
                      - 321654
                      items:
                        type: integer
                      type: array
                  required:
                  - followers
                  type: object
              type: object
        description: The tag to remove to the task.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Successfully removed the specified tag to the task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Removes followers from a task.
      tags:
      - Tasks
  /tasks/{task-id}/removeProject:
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Removes the task from the specified project. The task will still
        exist in

        the system, but it will not be in the project anymore.


        Returns an empty data block.'
      operationId: removeProjectFromTask
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    project:
                      description: The project to remove the task from.
                      example: 13579
                      type: integer
                  required:
                  - project
                  type: object
              type: object
        description: The project to remove the task from.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Successfully removed the specified project from the task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Remove the project from the specified task.
      tags:
      - Tasks
  /tasks/{task-id}/removeTag:
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: Removes a tag from a task. Returns an empty data block.
      operationId: removeTagFromTask
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    tag:
                      description: The tag to remove from the task.
                      example: 13579
                      type: integer
                  required:
                  - tag
                  type: object
              type: object
        description: The tag to remove from the task.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Successfully removed the specified tag from the task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Removes a tag from a task
      tags:
      - Tasks
  /tasks/{task-id}/setParent:
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: Changes the parent of a task. Each task may only be a subtask of
        a single parent, or no parent task at all. Returns an empty data block.
      operationId: changeSubtaskParent
      requestBody:
        content:
          application/json:
            schema:
              properties:
                data:
                  properties:
                    parent:
                      description: The new parent of the task, or `null` for no parent.
                      example: 987654
                      type: integer
                  required:
                  - parent
                  type: object
              type: object
        description: The new parent of the subtask.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskObject'
          description: Successfully changed the parent of the specified subtask.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Change the parent of a task.
      tags:
      - Tasks
  /tasks/{task-id}/stories:
    get:
      description: Returns the compact records for all stories on the task.
      operationId: getTaskStories
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryArray'
          description: Successfully retrieved the specified task's stories.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the compact records for all stories on the task.
      tags:
      - Stories
      - Tasks
    parameters:
    - description: The task to get stories from.
      example: 321654
      in: path
      name: task-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Adds a comment to a task. The comment will be authored by the
        currently

        authenticated user, and timestamped when the server receives the

        request.


        Returns the full record for the new story added to the task.'
      operationId: createCommentStory
      requestBody:
        content:
          application/json:
            schema:
              properties:
                task:
                  description: Globally unique identifier for the task.
                  example: 123456
                  type: integer
                text:
                  description: The plain text of the comment to add.
                  example: This is a comment.
                  type: string
              required:
              - task
              - text
              type: object
        description: The comment story to create.
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoryObject'
          description: Successfully created a new story.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Adds a comment to a task.
      tags:
      - Stories
      - Tasks
  /tasks/{task-id}/subtasks:
    get:
      description: Returns a compact representation of all of the subtasks of a task.
      operationId: getSubTasks
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskArray'
          description: Successfully retrieved the specified task's subtasks.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get a subtask.
      tags:
      - Tasks
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: Creates a new subtask and adds it to the parent task. Returns the
        full record for the newly created subtask.
      operationId: createSubtask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskObject'
        description: The new subtask to create.
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskObject'
          description: Successfully created the specified subtask.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Create a subtask.
      tags:
      - Tasks
  /tasks/{task-id}/tags:
    get:
      description: Get a compact representation of all of the tags the task has.
      operationId: getTaskTags
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagArray'
          description: Successfully retrieved the tags for the given task.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get all of the tags for a given task.
      tags:
      - Tasks
    parameters:
    - $ref: '#/components/parameters/task-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /teams/{team-id}:
    get:
      description: Returns the full record for a single team.
      operationId: getTeam
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamObject'
          description: Successsfully retrieved the record for a single team.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get a single team.
      tags:
      - Team
    parameters:
    - description: Globally unique identifier for the team.
      example: 14916
      in: path
      name: team-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /teams/{team-id}/addUser:
    parameters:
    - description: A globally unique identifier for the team.
      examples:
        id:
          summary: A globally unique identifier for the team
          value: 14916
      in: path
      name: team-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: The user making this call must be a member of the team in order
        to add others. The user being added must exist in the same organization as
        the team.
      operationId: addUserToTeam
      requestBody:
        content:
          application/json:
            examples:
              email:
                summary: An email address for a user
                value:
                  user: sashimi@asana.com
              id:
                summary: A globally unique identifier for the user
                value:
                  user: 14641
            schema:
              $ref: '#/components/schemas/UserIdObject'
        description: The user to add to the team.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserArray'
          description: Returns the full user record for the added user.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Add a user to a given team
      tags:
      - Team
  /teams/{team-id}/projects:
    get:
      description: Returns the compact project records for all projects in the team.
      operationId: getProjectsInTeam
      parameters:
      - $ref: '#/components/parameters/archived-query-param'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectArray'
          description: Successfully retrieved the requested team's projects.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the compact project records for all projects in the team.
      tags:
      - Projects
    parameters:
    - $ref: '#/components/parameters/team-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Creates a project shared with the given team.


        Returns the full record of the newly created project.'
      operationId: createProjectsWithTeam
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectObject'
        description: The new project to create.
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectObject'
          description: Successfully created the specified project.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Create a new project shared with the given team.
      tags:
      - Projects
  /teams/{team-id}/removeUser:
    parameters:
    - description: A globally unique identifier for the team.
      examples:
        id:
          summary: A globally unique identifier for the team.
          value: 14916
      in: path
      name: team-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: The user making this call must be a member of the team in order
        to remove themselves or others.
      operationId: removeUserFromTeam
      requestBody:
        content:
          application/json:
            examples:
              email:
                summary: An email address for a user
                value:
                  user: sashimi@asana.com
              id:
                summary: A globally unique identifier for the user
                value:
                  user: 14641
            schema:
              $ref: '#/components/schemas/UserIdObject'
        description: The user to remove from the team.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserArray'
          description: Returns an empty data record
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Remove a user from a given team
      tags:
      - Team
  /teams/{team-id}/users:
    get:
      description: Returns the compact records for all users that are members of the
        team.
      operationId: getUsersForTeam
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserArray'
          description: Returns the user records for all the members of the team, including
            guests and limited access users
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the users in a given team
      tags:
      - Team
    parameters:
    - description: A globally unique identifier for the team.
      examples:
        id:
          summary: A globally unique identifier for the team
          value: 14916
      in: path
      name: team-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /users:
    get:
      description: 'Returns the user records for all users in all workspaces and organizations
        accessible to the authenticated user. Accepts an optional workspace ID parameter.

        Results are sorted by user ID.'
      operationId: getAllUsers
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserArray'
          description: Successfully retrieved the requested user records.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get all users known to the authenticated user.
      tags:
      - Users
    parameters:
    - description: The workspace or organization ID to filter users on.
      example: 1331
      in: query
      name: workspace
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /users/{user-id}:
    get:
      description: 'Returns the full user record for the single user with the provided
        ID.

        Results are sorted by user ID.'
      operationId: getUser
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
          description: Returns the user specified.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get a single Asana user
      tags:
      - Users
    parameters:
    - description: An identifier for the user. Can be one of an email address, the
        globally unique identifier for the user, or the keyword `me` to indicate the
        current user making the request.
      examples:
        email:
          summary: An email address for a user
          value: sashimi@asana.com
        id:
          summary: A globally unique identifier for the user
          value: 14641
        me:
          summary: The keyword 'me' to indicate the current user making the request.
          value: me
      in: path
      name: user-id
      required: true
      schema:
        oneOf:
        - type: integer
        - enum:
          - me
          type: string
        - format: email
          type: string
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /users/{user-id}/teams:
    get:
      description: Returns the compact records for all teams to which the given user
        is assigned.
      operationId: getTeamsForUser
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamArray'
          description: Returns the team records for all teams in the organization
            or workspace to which the given user is assigned.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the given user's teams.
      tags:
      - Team
    parameters:
    - description: An identifier for the user. Can be one of an email address, the
        globally unique identifier for the user, or the keyword `me` to indicate the
        current user making the request.
      examples:
        email:
          summary: An email address for a user
          value: sashimi@asana.com
        id:
          summary: A globally unique identifier for the user
          value: 14641
        me:
          summary: The keyword 'me' to indicate the current user making the request.
          value: me
      in: path
      name: user-id
      required: true
      schema:
        oneOf:
        - type: integer
        - enum:
          - me
          type: string
        - format: email
          type: string
    - description: The workspace or organization to filter teams on.
      example: 1331
      in: query
      name: organization-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /webhooks:
    get:
      description: Get the compact representation of all webhooks your app has registered
        for the authenticated user in the given workspace.
      operationId: getWebhooks
      parameters:
      - description: The workspace to query for webhooks in.
        example: 1331
        in: query
        name: workspace
        required: true
        schema:
          type: integer
      - description: Only return webhooks for the given resource.
        example: 51648
        in: query
        name: resource
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookArray'
          description: Successfully retrieved the requested webhooks.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get webhooks for a given app-workspace-user combination.
      tags:
      - Webhooks
    parameters:
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: "Establishing a webhook is a two-part process. First, a simple\
        \ HTTP POST\nsimilar to any other resource creation. Since you could have\
        \ multiple\nwebhooks we recommend specifying a unique local id for each target.\n\
        \nNext comes the confirmation handshake. When a webhook is created, we will\n\
        send a test POST to the target with an `X-Hook-Secret` header as\ndescribed\
        \ in the [Resthooks Security\ndocumentation](http://resthooks.org/docs/security/).\
        \ The target must\nrespond with a `200 OK` and a matching `X-Hook-Secret`\
        \ header to confirm\nthat this webhook subscription is indeed expected.\n\n\
        If you do not acknowledge the webhook’s confirmation handshake it will\nfail\
        \ to setup, and you will receive an error in response to your attempt\nto\
        \ create it. This means you need to be able to receive and complete the\n\
        webhook *while* the POST request is in-flight.\n\n```\n# Request\ncurl -H\
        \ \"Authorization: Bearer <personal_access_token>\" \\\n-X POST https://app.asana.com/api/1.0/webhooks\
        \ \\\n-d \"resource=8675309\" \\\n-d \"target=https://example.com/receive-webhook/7654\"\
        \n```\n\n```\n# Handshake sent to https://example.com/\nPOST /receive-webhook/7654\n\
        X-Hook-Secret: b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81\n\
        ```\n\n```\n# Handshake response sent by example.com\nHTTP/1.1 200\nX-Hook-Secret:\
        \ b537207f20cbfa02357cf448134da559e8bd39d61597dcd5631b8012eae53e81\n```\n\n\
        ```\n# Response\nHTTP/1.1 201\n{\n  \"data\": {\n    \"id\": 43214,\n    \"\
        resource\": {\n      \"id\": 8675309,\n      \"name\": \"Bugs\"\n    },\n\
        \    \"target\": \"https://example.com/receive-webhook/7654\",\n    \"active\"\
        : false,\n    \"last_success_at\": null,\n    \"last_failure_at\": null,\n\
        \    \"last_failure_content\": null\n  }\n}\n```"
      operationId: createWebhook
      requestBody:
        content:
          application/json:
            schema:
              properties:
                resource:
                  description: A resource ID to subscribe to. The resource can be
                    a task or project.
                  example: 12345
                  type: integer
                target:
                  description: The URL to receive the HTTP POST.
                  example: https://example.com/receive-webhook/7654
                  format: uri
                  type: string
              required:
              - resource
              - target
              type: object
        description: The webhook workspace and target.
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookObject'
          description: Successfully created the requested webhook.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Establish a new webhook with a given resource.
      tags:
      - Webhooks
  /webhooks/{webhook-id}:
    delete:
      description: This method permanently removes a webhook. Note that it may be
        possible to receive a request that was already in flight after deleting the
        webhook, but no further requests will be issued.
      operationId: deleteWebhook
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Successfully retrieved the requested webhook.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Permanently remove a webhook.
      tags:
      - Webhooks
    get:
      description: Returns the full record for the given webhook.
      operationId: getWebhook
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookObject'
          description: Successfully retrieved the requested webhook.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the full record for the given webhook.
      tags:
      - Webhooks
    parameters:
    - description: The webhook to affect with the current operation.
      in: path
      name: webhook-id
      required: true
      schema:
        example: 95784
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /workspaces:
    get:
      description: Returns the compact records for all workspaces visible to the authorized
        user.
      operationId: getAllWorkspaces
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceArray'
          description: Return all workspaces visible to the authorized user.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get all workspaces visible to the authorized user.
      tags:
      - Workspaces
    parameters:
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /workspaces/{workspace-id}:
    get:
      description: Returns the full workspace record for a single workspace.
      operationId: getWorkspace
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceObject'
          description: Return the full workspace record.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get a single workspace.
      tags:
      - Workspaces
    parameters:
    - $ref: '#/components/parameters/workspace-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    put:
      description: 'A specific, existing workspace can be updated by making a PUT
        request on the URL for that workspace. Only the fields provided in the data
        block will be updated; any unspecified fields will remain unchanged.

        Currently the only field that can be modified for a workspace is its name.

        Returns the complete, updated workspace record.'
      operationId: updateWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceObject'
        description: The workspace object with all updated properties.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceObject'
          description: Update for the workspace was successful.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Update a workspace
      tags:
      - Workspaces
  /workspaces/{workspace-id}/addUser:
    parameters:
    - $ref: '#/components/parameters/workspace-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Add a user to a workspace or organization.

        The user can be referenced by their globally unique user ID or their email
        address. Returns the full user record for the invited user.'
      operationId: addUserToWorkspace
      requestBody:
        content:
          application/json:
            examples:
              email:
                summary: An email address for a user
                value:
                  user: sashimi@asana.com
              id:
                summary: A globally unique identifier for the user
                value:
                  user: 14641
              me:
                summary: The keyword 'me' to indicate the current user making the
                  request.
                value:
                  user: me
            schema:
              $ref: '#/components/schemas/UserIdObject'
        description: The user to add to the workspace.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
          description: The user was added successfully to the workspace or organization.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Add a user to a workspace or organization.
      tags:
      - Workspaces
  /workspaces/{workspace-id}/custom_fields:
    get:
      description: Returns a list of the compact representation of all of the custom
        fields in a workspace.
      operationId: getCustomFieldsInWorkspace
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomFieldArray'
          description: Successfully retrieved all custom fields for the given workspace.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get all of the custom fields in a workspace.
      tags:
      - Custom Fields
    parameters:
    - description: The workspace or organization to find custom field definitions
        in.
      example: 1331
      in: path
      name: workspace-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /workspaces/{workspace-id}/projects:
    get:
      description: Returns the compact project records for all projects in the workspace.
      operationId: getProjectsInWorkspace
      parameters:
      - $ref: '#/components/parameters/archived-query-param'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectArray'
          description: Successfully retrieved the requested workspace's projects.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get the compact project records for all projects in the workspace.
      tags:
      - Projects
    parameters:
    - $ref: '#/components/parameters/workspace-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Returns the compact project records for all projects in the workspace.


        If the workspace for your project is an organization, you must also

        supply a team to share the project with.


        Returns the full record of the newly created project.'
      operationId: createProjectsInWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectObject'
        description: The new project to create.
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectObject'
          description: Successfully created a new project in the specified workspace.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Create a new project in the specified workspace.
      tags:
      - Projects
  /workspaces/{workspace-id}/removeUser:
    parameters:
    - $ref: '#/components/parameters/workspace-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Remove a user from a workspace or organization.

        The user making this call must be an admin in the workspace. The user can
        be referenced by their globally unique user ID or their email address.

        Returns an empty data record.'
      operationId: removeUserToWorkspace
      requestBody:
        content:
          application/json:
            examples:
              email:
                summary: An email address for a user
                value:
                  user: sashimi@asana.com
              id:
                summary: A globally unique identifier for the user
                value:
                  user: 14641
              me:
                summary: The keyword 'me' to indicate the current user making the
                  request.
                value:
                  user: me
            schema:
              $ref: '#/components/schemas/UserIdObject'
        description: The user to remove from the workspace.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
          description: The user was removed successfully to the workspace or organization.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Remove a user from a workspace or organization.
      tags:
      - Workspaces
  /workspaces/{workspace-id}/tags:
    get:
      description: Returns the compact tag records for some filtered set of tags.
        Use one or more of the parameters provided to filter the tags returned.
      operationId: queryAllTagsInWorkspace
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagArray'
          description: Successfully retrieved the specified set of tags.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get a set of tags in a single workspace.
      tags:
      - Tags
    parameters:
    - description: The workspace to filter tags on.
      example: 1331
      in: path
      name: workspace-id
      required: true
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
    post:
      description: 'Creates a new tag in a workspace or organization.


        Every tag is required to be created in a specific workspace or

        organization, and this cannot be changed once set. Note that you can use

        the workspace parameter regardless of whether or not it is an

        organization.


        Returns the full record of the newly created tag.'
      operationId: createTagInWorkspace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagObject'
        description: The tag to create.
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagArray'
          description: Successfully retrieved the specified set of tags.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Create a new tag in a workspace or organization.
      tags:
      - Tags
  /workspaces/{workspace-id}/typeahead:
    get:
      description: 'Retrieves objects in the workspace based via an auto-completion/typeahead

        search algorithm. This feature is meant to provide results quickly, so do

        not rely on this API to provide extremely accurate search results. The

        result set is limited to a single page of results with a maximum size, so

        you won’t be able to fetch large numbers of results.


        The typeahead search API provides search for objects from a single

        workspace. This endpoint should be used to query for objects when

        creating an auto-completion/typeahead search feature. This API is meant

        to provide results quickly and should not be relied upon for accurate or

        exhaustive search results. The results sets are limited in size and

        cannot be paginated.


        Queries return a compact representation of each object which is typically

        the id and name fields. Interested in a specific set of fields or all of

        the fields?! Of course you are. Use field selectors to manipulate what

        data is included in a response.'
      operationId: getTypeahead
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsanaObjectArray'
          description: Successfully retrieved objects via a typeahead search algorithm.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Retrieve objects via a typeahead search algorithm.
      tags:
      - Workspaces
      - Typeahead
    parameters:
    - $ref: '#/components/parameters/workspace-path-id'
    - description: 'The type of values the typeahead should return. You can choose
        from one of the following: `custom_field`, `project`, `tag`, `task`, and `user`.
        Note that unlike in the names of endpoints, the types listed here are in singular
        form (e.g. `task`). Using multiple types is not yet supported.'
      example: user
      in: query
      name: type
      required: true
      schema:
        enum:
        - custom_field
        - project
        - tag
        - task
        - user
        type: string
    - description: The string that will be used to search for relevant objects. If
        an empty string is passed in, the API will currently return an empty result
        set.
      example: Greg
      in: query
      name: query
      schema:
        type: string
    - description: The number of results to return. The default is 20 if this parameter
        is omitted, with a minimum of 1 and a maximum of 100. If there are fewer results
        found than requested, all will be returned.
      example: 20
      in: query
      name: count
      schema:
        type: integer
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
  /workspaces/{workspace-id}/users:
    get:
      description: 'Returns the user records for all users in the specified workspace
        or organization.

        Results are sorted alphabetically by user names.'
      operationId: getUsersInWorkspace
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserArray'
          description: Return the users in the specified workspace or org.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        5XX:
          $ref: '#/components/responses/InternalServerError'
        default:
          $ref: '#/components/responses/GenericErrorResponse'
      summary: Get all users in the specified workspace or organization.
      tags:
      - Users
    parameters:
    - $ref: '#/components/parameters/workspace-path-id'
    - $ref: '#/components/parameters/pretty'
    - $ref: '#/components/parameters/fields'
    - $ref: '#/components/parameters/expand'
    - $ref: '#/components/parameters/limit'
    - $ref: '#/components/parameters/offset'
security:
- personalAccessToken: []
- oauth2: []
servers:
- description: Main endpoint.
  url: https://app.asana.com/api/{version}
  variables:
    version:
      default: '1.0'
      description: The version of the API to use.
      enum:
      - '1.0'
tags:
- description: An *attachment* object represents any file attached to a task in Asana,
    whether it’s an uploaded file or one associated via a third-party service such
    as Dropbox or Google Drive.
  name: Attachments
- description: The Batch API allows for making multiple requests in parallel to Asana's
    API.
  name: Batch API
- description: Custom Fields store the metadata that is used in order to add user-specified
    information to tasks in Asana.
  name: Custom Fields
- description: Custom Fields Settings objects represent the many-to-many join of the
    Custom Field and Project as well as stores information that is relevant to that
    particular pairing.
  name: Custom Field Settings
- description: An event is an object representing a change to a resource that was
    observed by an event subscription.
  name: Events
- description: An *organization_export* object represents a request to export the
    complete data of an Organization in JSON format.
  name: Organization Exports
- description: A `project` represents a prioritized list of tasks in Asana or a board
    with columns of tasks represented as cards. It exists in a single workspace or
    organization and is accessible to a subset of users in that workspace or organization,
    depending on its permissions.
  name: Projects
- description: With the introduction of “comment-only” projects in Asana, a user’s
    membership in a project comes with associated permissions. These permissions (whether
    a user has full access to the project or comment-only access) are accessible through
    the project memberships endpoints described here.
  name: Project Memberships
- description: A *section* is a subdivision of a project that groups tasks together.
  name: Sections
- description: A story represents an activity associated with an object in the Asana
    system.
  name: Stories
- description: A tag is a label that can be attached to any task in Asana. It exists
    in a single workspace or organization.
  name: Tags
- description: The task is the basic object around which many operations in Asana
    are centered.
  name: Tasks
- description: A *team* is used to group related projects and people together within
    an organization. Each project in an organization is associated with a team.
  name: Team
- description: The typeahead search API provides search for objects from a single
    workspace.
  name: Typeahead
- description: A user object represents an account in Asana that can be given access
    to various workspaces, projects, and tasks.
  name: Users
- description: Webhooks allow an application to be notified of changes in Asana.
  name: Webhooks
- description: A workspace is the highest-level organizational unit in Asana. An organization
    is a special kind of workspace that represents a company.
  name: Workspaces
